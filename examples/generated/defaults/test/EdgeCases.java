// Code generated by protoc-gen-puregen. DO NOT EDIT.

package defaults.test;

import java.util.*;
import java.io.*;
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.*;

    // Test message with various edge cases for default values
public class EdgeCases {
    /**
     * String with simple text
     * puregen:generate: {"value": "Hello World"}
     */
    @JsonProperty("simpleString")
    private String simpleString;

    /**
     * Empty string default
     * puregen:generate: {"value": ""}
     */
    @JsonProperty("emptyString")
    private String emptyString;

    /**
     * Zero values
     * puregen:generate: {"value": "0"}
     */
    @JsonProperty("zeroInt")
    private int zeroInt;

    // puregen:generate: {"value": "0.0"}
    @JsonProperty("zeroFloat")
    private float zeroFloat;

    // puregen:generate: {"value": "false"}
    @JsonProperty("falseBool")
    private boolean falseBool;

    /**
     * Large numbers
     * puregen:generate: {"value": "9223372036854775807"}
     */
    @JsonProperty("largeInt")
    private long largeInt;

    /**
     * Negative numbers
     * puregen:generate: {"value": "-42"}
     */
    @JsonProperty("negativeInt")
    private int negativeInt;

    /**
     * Scientific notation
     * puregen:generate: {"value": "1.23e-4"}
     */
    @JsonProperty("scientific")
    private double scientific;

    // Field without directive (should use language defaults)
    @JsonProperty("noDirective")
    private String noDirective;

    /**
     * Different numeric types
     * puregen:generate: {"value": "255"}
     */
    @JsonProperty("unsignedValue")
    private int unsignedValue;

    // puregen:generate: {"value": "2147483647"}
    @JsonProperty("signedValue")
    private int signedValue;

    public EdgeCases() {
        this.simpleString = "Hello World";
        this.emptyString = "";
        this.zeroInt = 0;
        this.zeroFloat = 0.0f;
        this.falseBool = false;
        this.largeInt = 9223372036854775807L;
        this.negativeInt = -42;
        this.scientific = 1.23e-4;
        this.unsignedValue = 255;
        this.signedValue = 2147483647;
    }

    public String getSimpleString() {
        return simpleString;
    }

    public void setSimpleString(String simpleString) {
        this.simpleString = simpleString;
    }

    public String getEmptyString() {
        return emptyString;
    }

    public void setEmptyString(String emptyString) {
        this.emptyString = emptyString;
    }

    public int getZeroInt() {
        return zeroInt;
    }

    public void setZeroInt(int zeroInt) {
        this.zeroInt = zeroInt;
    }

    public float getZeroFloat() {
        return zeroFloat;
    }

    public void setZeroFloat(float zeroFloat) {
        this.zeroFloat = zeroFloat;
    }

    public boolean getFalseBool() {
        return falseBool;
    }

    public void setFalseBool(boolean falseBool) {
        this.falseBool = falseBool;
    }

    public long getLargeInt() {
        return largeInt;
    }

    public void setLargeInt(long largeInt) {
        this.largeInt = largeInt;
    }

    public int getNegativeInt() {
        return negativeInt;
    }

    public void setNegativeInt(int negativeInt) {
        this.negativeInt = negativeInt;
    }

    public double getScientific() {
        return scientific;
    }

    public void setScientific(double scientific) {
        this.scientific = scientific;
    }

    public String getNoDirective() {
        return noDirective;
    }

    public void setNoDirective(String noDirective) {
        this.noDirective = noDirective;
    }

    public int getUnsignedValue() {
        return unsignedValue;
    }

    public void setUnsignedValue(int unsignedValue) {
        this.unsignedValue = unsignedValue;
    }

    public int getSignedValue() {
        return signedValue;
    }

    public void setSignedValue(int signedValue) {
        this.signedValue = signedValue;
    }

    public static class Builder {
        private EdgeCases instance = new EdgeCases();

        public Builder setSimpleString(String simpleString) {
            instance.setSimpleString(simpleString);
            return this;
        }

        public Builder setEmptyString(String emptyString) {
            instance.setEmptyString(emptyString);
            return this;
        }

        public Builder setZeroInt(int zeroInt) {
            instance.setZeroInt(zeroInt);
            return this;
        }

        public Builder setZeroFloat(float zeroFloat) {
            instance.setZeroFloat(zeroFloat);
            return this;
        }

        public Builder setFalseBool(boolean falseBool) {
            instance.setFalseBool(falseBool);
            return this;
        }

        public Builder setLargeInt(long largeInt) {
            instance.setLargeInt(largeInt);
            return this;
        }

        public Builder setNegativeInt(int negativeInt) {
            instance.setNegativeInt(negativeInt);
            return this;
        }

        public Builder setScientific(double scientific) {
            instance.setScientific(scientific);
            return this;
        }

        public Builder setNoDirective(String noDirective) {
            instance.setNoDirective(noDirective);
            return this;
        }

        public Builder setUnsignedValue(int unsignedValue) {
            instance.setUnsignedValue(unsignedValue);
            return this;
        }

        public Builder setSignedValue(int signedValue) {
            instance.setSignedValue(signedValue);
            return this;
        }

        public EdgeCases build() {
            return instance;
        }
    }

    public boolean validate() {
        // Add custom validation logic here
        return true;
    }

    public String toJson() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        return mapper.writeValueAsString(this);
    }

    public static EdgeCases fromJson(String json) throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        return mapper.readValue(json, EdgeCases.class);
    }

}
