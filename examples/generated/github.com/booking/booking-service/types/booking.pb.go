// Code generated by protoc-gen-puregen. DO NOT EDIT.

package types

import (
	"context"
	"encoding/json"
	"fmt"
)

// Enums

type OperationType int32

const (
	OperationType_OperationType_UNKNOWN           OperationType = 0
	OperationType_OperationType_HOTEL_RESERVATION               = 1
	OperationType_OperationType_FLIGHT_BOOKING                  = 2
	OperationType_OperationType_TRAVEL_PACKAGE                  = 3
)

var OperationType_name = map[int32]string{
	0: "OperationType_UNKNOWN",
	1: "OperationType_HOTEL_RESERVATION",
	2: "OperationType_FLIGHT_BOOKING",
	3: "OperationType_TRAVEL_PACKAGE",
}

var OperationType_value = map[string]int32{
	"OperationType_UNKNOWN":           0,
	"OperationType_HOTEL_RESERVATION": 1,
	"OperationType_FLIGHT_BOOKING":    2,
	"OperationType_TRAVEL_PACKAGE":    3,
}

func (x OperationType) String() string {
	if name, ok := OperationType_name[int32(x)]; ok {
		return name
	}
	return fmt.Sprintf("OperationType(%d)", x)
}

func ParseOperationType(s string) (OperationType, error) {
	if value, ok := OperationType_value[s]; ok {
		return OperationType(value), nil
	}
	return 0, fmt.Errorf("invalid OperationType value: %s", s)
}

func (x OperationType) IsValid() bool {
	_, ok := OperationType_name[int32(x)]
	return ok
}

// BookingStatus enum values as string constants
const (
	BookingStatus_BookingStatus_UNKNOWN              = "BookingStatus_UNKNOWN"
	BookingStatus_BookingStatus_CONFIRMED            = "BookingStatus_CONFIRMED"
	BookingStatus_BookingStatus_FAILED               = "BookingStatus_FAILED"
	BookingStatus_BookingStatus_PENDING              = "BookingStatus_PENDING"
	BookingStatus_BookingStatus_PARTIAL_CONFIRMATION = "BookingStatus_PARTIAL_CONFIRMATION"
	BookingStatus_BookingStatus_CANCELLED            = "BookingStatus_CANCELLED"
)

var BookingStatusValues = []string{
	BookingStatus_BookingStatus_UNKNOWN,
	BookingStatus_BookingStatus_CONFIRMED,
	BookingStatus_BookingStatus_FAILED,
	BookingStatus_BookingStatus_PENDING,
	BookingStatus_BookingStatus_PARTIAL_CONFIRMATION,
	BookingStatus_BookingStatus_CANCELLED,
}

func IsValidBookingStatus(value string) bool {
	for _, v := range BookingStatusValues {
		if v == value {
			return true
		}
	}
	return false
}

// HotelReservationRequest_RoomType enum values as string constants
const (
	HotelReservationRequest_RoomType_UNKNOWN   = "RoomType_UNKNOWN"
	HotelReservationRequest_RoomType_STANDARD  = "RoomType_STANDARD"
	HotelReservationRequest_RoomType_DELUXE    = "RoomType_DELUXE"
	HotelReservationRequest_RoomType_SUITE     = "RoomType_SUITE"
	HotelReservationRequest_RoomType_EXECUTIVE = "RoomType_EXECUTIVE"
)

var HotelReservationRequest_RoomTypeValues = []string{
	HotelReservationRequest_RoomType_UNKNOWN,
	HotelReservationRequest_RoomType_STANDARD,
	HotelReservationRequest_RoomType_DELUXE,
	HotelReservationRequest_RoomType_SUITE,
	HotelReservationRequest_RoomType_EXECUTIVE,
}

func IsValidHotelReservationRequest_RoomType(value string) bool {
	for _, v := range HotelReservationRequest_RoomTypeValues {
		if v == value {
			return true
		}
	}
	return false
}

// Messages

// Payment information
type PaymentInfo struct {
	// Payment method (e.g., credit card, PayPal)
	PaymentMethod string `json:"paymentMethod"`
	// Card token or payment reference
	PaymentToken  string        `json:"paymentToken"`
	OperationType OperationType `json:"operationType"`
}

func NewPaymentInfo() *PaymentInfo {
	return &PaymentInfo{}
}

func (m *PaymentInfo) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *PaymentInfo) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *PaymentInfo) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// Error Response
type Error struct {
	// Error message
	Message string `json:"message"`
	// Error code
	Code string `json:"code"`
}

func NewError() *Error {
	return &Error{}
}

func (m *Error) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *Error) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *Error) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// Information about the user making the booking request
type BookingHeader struct {
	// User who initiated the booking request
	UserId string `json:"userId"`
	// Application from which the request originated
	ApplicationName string `json:"applicationName"`
	// Booking request ID
	RequestId string `json:"requestId"`
	// Request timestamp
	RequestTimestamp int64 `json:"requestTimestamp"`
}

func NewBookingHeader() *BookingHeader {
	return &BookingHeader{}
}

func (m *BookingHeader) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *BookingHeader) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *BookingHeader) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

type BookingOperationRequest struct {
	// Operation ID
	OperationId string `json:"operationId"`
	// Payment info used during original request
	PaymentInfo *PaymentInfo `json:"paymentInfo"`
	// Confirm the booking
	Confirm bool `json:"confirm"`
}

func NewBookingOperationRequest() *BookingOperationRequest {
	return &BookingOperationRequest{}
}

func (m *BookingOperationRequest) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *BookingOperationRequest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *BookingOperationRequest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// Response for booking operations
type BookingOperationResponse struct {
	// Operation ID
	OperationId string `json:"operationId"`
	// Status of the booking
	Status string `json:"status"`
	// Error message
	Error *Error `json:"error"`
}

func NewBookingOperationResponse() *BookingOperationResponse {
	return &BookingOperationResponse{}
}

func (m *BookingOperationResponse) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *BookingOperationResponse) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *BookingOperationResponse) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

type ListBookingsRequest struct {
	// Payment info used during original request
	PaymentInfo *PaymentInfo `json:"paymentInfo"`
}

func NewListBookingsRequest() *ListBookingsRequest {
	return &ListBookingsRequest{}
}

func (m *ListBookingsRequest) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *ListBookingsRequest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *ListBookingsRequest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// Response for list bookings
type ListBookingsResponse struct {
	// List of confirmed booking IDs
	ConfirmedBookingIds []string `json:"confirmedBookingIds"`
	// Pending booking IDs
	PendingBookingIds []string `json:"pendingBookingIds"`
	// Error message
	Error *Error `json:"error"`
}

func NewListBookingsResponse() *ListBookingsResponse {
	return &ListBookingsResponse{}
}

func (m *ListBookingsResponse) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *ListBookingsResponse) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *ListBookingsResponse) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

type BookingConfirmationRequest struct {
	// Booking ID
	BookingIds []string `json:"bookingIds"`
	// Payment info used during original request
	PaymentInfo *PaymentInfo `json:"paymentInfo"`
}

func NewBookingConfirmationRequest() *BookingConfirmationRequest {
	return &BookingConfirmationRequest{}
}

func (m *BookingConfirmationRequest) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *BookingConfirmationRequest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *BookingConfirmationRequest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

type BookingStatsResponse struct {
	// Total amount charged
	TotalAmountCharged float64 `json:"totalAmountCharged"`
	// Total number of guests
	TotalGuests int32 `json:"totalGuests"`
	// Total bookings
	TotalBookings int32 `json:"totalBookings"`
}

func NewBookingStatsResponse() *BookingStatsResponse {
	return &BookingStatsResponse{}
}

func (m *BookingStatsResponse) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *BookingStatsResponse) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *BookingStatsResponse) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// Request for hotel reservation
type HotelReservationRequest struct {
	// Hotel search criteria
	HotelLocations []string `json:"hotelLocations"`
	// List of preferred room types
	RoomTypes []string `json:"roomTypes"`
	// Maximum price per night
	MaxPricePerNight float64 `json:"maxPricePerNight"`
	// Required payment information
	PaymentInfo *PaymentInfo `json:"paymentInfo"`
	// Check-in and check-out dates (Unix timestamp)
	CheckInDate  int64 `json:"checkInDate"`
	CheckOutDate int64 `json:"checkOutDate"`
	// Number of guests
	NumberOfGuests int32 `json:"numberOfGuests"`
}

func NewHotelReservationRequest() *HotelReservationRequest {
	return &HotelReservationRequest{}
}

func (m *HotelReservationRequest) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *HotelReservationRequest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *HotelReservationRequest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// Response for hotel reservation
type HotelReservationResponse struct {
	// List of results for each search location
	Result []*HotelReservationResponse_SingleHotelReservationResponse `json:"result"`
	// Status of the request
	Status string `json:"status"`
	// Error message
	Error *Error `json:"error"`
	// Booking stats
	BookingStats *BookingStatsResponse `json:"bookingStats"`
}

func NewHotelReservationResponse() *HotelReservationResponse {
	return &HotelReservationResponse{}
}

func (m *HotelReservationResponse) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *HotelReservationResponse) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *HotelReservationResponse) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// Hotel information
type HotelReservationResponse_Hotel struct {
	// Name of the hotel
	Name string `json:"name"`
	// Hotel rating (1-5 stars)
	Rating float64 `json:"rating"`
	// Price per night
	PricePerNight float64 `json:"pricePerNight"`
	// Hotel address
	Address string `json:"address"`
}

func NewHotelReservationResponse_Hotel() *HotelReservationResponse_Hotel {
	return &HotelReservationResponse_Hotel{}
}

func (m *HotelReservationResponse_Hotel) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *HotelReservationResponse_Hotel) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *HotelReservationResponse_Hotel) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// Room availability with hotel details
type HotelReservationResponse_AvailableRoom struct {
	// Hotel information
	Hotel *HotelReservationResponse_Hotel `json:"hotel"`
	// Room type
	RoomType string `json:"roomType"`
	// Available rooms count
	AvailableRooms int32 `json:"availableRooms"`
}

func NewHotelReservationResponse_AvailableRoom() *HotelReservationResponse_AvailableRoom {
	return &HotelReservationResponse_AvailableRoom{}
}

func (m *HotelReservationResponse_AvailableRoom) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *HotelReservationResponse_AvailableRoom) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *HotelReservationResponse_AvailableRoom) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// Hotel reservation result for single location
type HotelReservationResponse_SingleHotelReservationResponse struct {
	// List of available rooms
	AvailableRooms []*HotelReservationResponse_AvailableRoom `json:"availableRooms"`
	// Error message
	Error *Error `json:"error"`
}

func NewHotelReservationResponse_SingleHotelReservationResponse() *HotelReservationResponse_SingleHotelReservationResponse {
	return &HotelReservationResponse_SingleHotelReservationResponse{}
}

func (m *HotelReservationResponse_SingleHotelReservationResponse) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *HotelReservationResponse_SingleHotelReservationResponse) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *HotelReservationResponse_SingleHotelReservationResponse) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// Request for flight booking
type FlightBookingRequest struct {
	// Flight search criteria
	FlightRoutes []string `json:"flightRoutes"`
	// Required payment information
	PaymentInfo *PaymentInfo `json:"paymentInfo"`
	// Include hotel recommendations
	IncludeHotelRecommendations bool `json:"includeHotelRecommendations"`
	// Departure and return dates (Unix timestamp)
	DepartureDate int64 `json:"departureDate"`
	ReturnDate    int64 `json:"returnDate"`
	// Number of passengers
	NumberOfPassengers int32 `json:"numberOfPassengers"`
}

func NewFlightBookingRequest() *FlightBookingRequest {
	return &FlightBookingRequest{}
}

func (m *FlightBookingRequest) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *FlightBookingRequest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *FlightBookingRequest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// Response for flight booking
type FlightBookingResponse struct {
	// List of flight bookings for each route
	FlightBooking []*FlightBookingResponse_SingleFlightBooking `json:"FlightBooking"`
	// Error message
	Error *Error `json:"error"`
	// Status of the request
	Status string `json:"status"`
	// Booking stats
	BookingStats *BookingStatsResponse `json:"bookingStats"`
}

func NewFlightBookingResponse() *FlightBookingResponse {
	return &FlightBookingResponse{}
}

func (m *FlightBookingResponse) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *FlightBookingResponse) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *FlightBookingResponse) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// Response for single flight booking
type FlightBookingResponse_SingleFlightBooking struct {
	// Flight details
	FlightNumber string `json:"flightNumber"`
	// Airline name
	Airline string `json:"airline"`
	// Flight price
	Price float64 `json:"price"`
	// Departure time
	DepartureTime int64 `json:"departureTime"`
	// Arrival time
	ArrivalTime int64 `json:"arrivalTime"`
	// Error message
	Error *Error `json:"error"`
	// Hotel recommendations associated with the flight
	HotelRecommendations *HotelReservationResponse_SingleHotelReservationResponse `json:"hotelRecommendations"`
}

func NewFlightBookingResponse_SingleFlightBooking() *FlightBookingResponse_SingleFlightBooking {
	return &FlightBookingResponse_SingleFlightBooking{}
}

func (m *FlightBookingResponse_SingleFlightBooking) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *FlightBookingResponse_SingleFlightBooking) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *FlightBookingResponse_SingleFlightBooking) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// Request for travel package booking
type TravelPackageBookingRequest struct {
	// Travel destinations
	Destinations []string `json:"destinations"`
	// Required payment information
	PaymentInfo *PaymentInfo `json:"paymentInfo"`
}

func NewTravelPackageBookingRequest() *TravelPackageBookingRequest {
	return &TravelPackageBookingRequest{}
}

func (m *TravelPackageBookingRequest) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *TravelPackageBookingRequest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *TravelPackageBookingRequest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// Response for travel package booking
type TravelPackageBookingResponse struct {
	// List of travel packages for each destination
	TravelPackages []*TravelPackageBookingResponse_SingleTravelPackageResponse `json:"travelPackages"`
	// Error message
	Error *Error `json:"error"`
	// Status of the request
	Status string `json:"status"`
	// Booking stats
	BookingStats *BookingStatsResponse `json:"bookingStats"`
}

func NewTravelPackageBookingResponse() *TravelPackageBookingResponse {
	return &TravelPackageBookingResponse{}
}

func (m *TravelPackageBookingResponse) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *TravelPackageBookingResponse) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *TravelPackageBookingResponse) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// Response for single travel package
type TravelPackageBookingResponse_SingleTravelPackageResponse struct {
	// Package name
	PackageName string `json:"packageName"`
	// Package description
	Description string `json:"description"`
	// Total package price
	TotalPrice float64 `json:"totalPrice"`
	// Package duration in days
	DurationDays int32 `json:"durationDays"`
	// Error message
	Error *Error `json:"error"`
}

func NewTravelPackageBookingResponse_SingleTravelPackageResponse() *TravelPackageBookingResponse_SingleTravelPackageResponse {
	return &TravelPackageBookingResponse_SingleTravelPackageResponse{}
}

func (m *TravelPackageBookingResponse_SingleTravelPackageResponse) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *TravelPackageBookingResponse_SingleTravelPackageResponse) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *TravelPackageBookingResponse_SingleTravelPackageResponse) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// Services

// Booking Service provides comprehensive reservation management capabilities including
// hotel bookings, flight reservations, and travel package management.
type BookingServiceService interface {
	// Starts hotel reservation process for given search criteria and returns operation ID
	StartHotelReservation(ctx context.Context, req *HotelReservationRequest) (*HotelReservationResponse, error)
	// Describes hotel reservation operations
	DescribeHotelReservation(ctx context.Context, req *HotelReservationRequest) (*HotelReservationResponse, error)
	// Gets hotel reservation details for given operation ID
	GetHotelReservationResult(ctx context.Context, req *HotelReservationRequest) (*HotelReservationResponse, error)
	// Starts flight booking operation and returns operation ID
	StartFlightBooking(ctx context.Context, req *FlightBookingRequest) (*FlightBookingResponse, error)
	// Describes flight booking operations
	DescribeFlightBooking(ctx context.Context, req *FlightBookingRequest) (*FlightBookingResponse, error)
	// Gets flight booking results for given operation ID
	GetFlightBookingResult(ctx context.Context, req *FlightBookingRequest) (*FlightBookingResponse, error)
	// Starts travel package booking operation and returns operation ID
	StartTravelPackageBooking(ctx context.Context, req *TravelPackageBookingRequest) (*TravelPackageBookingResponse, error)
	// Describes travel package booking operations
	DescribeTravelPackageBooking(ctx context.Context, req *TravelPackageBookingRequest) (*TravelPackageBookingResponse, error)
	// Gets travel package booking results for given operation ID
	GetTravelPackageBookingResult(ctx context.Context, req *TravelPackageBookingRequest) (*TravelPackageBookingResponse, error)
}

type DefaultBookingServiceService struct{}

// Starts hotel reservation process for given search criteria and returns operation ID
func (s *DefaultBookingServiceService) StartHotelReservation(ctx context.Context, req *HotelReservationRequest) (*HotelReservationResponse, error) {
	// TODO: Implement StartHotelReservation
	return &HotelReservationResponse{}, fmt.Errorf("method StartHotelReservation not implemented")
}

// Describes hotel reservation operations
func (s *DefaultBookingServiceService) DescribeHotelReservation(ctx context.Context, req *HotelReservationRequest) (*HotelReservationResponse, error) {
	// TODO: Implement DescribeHotelReservation
	return &HotelReservationResponse{}, fmt.Errorf("method DescribeHotelReservation not implemented")
}

// Gets hotel reservation details for given operation ID
func (s *DefaultBookingServiceService) GetHotelReservationResult(ctx context.Context, req *HotelReservationRequest) (*HotelReservationResponse, error) {
	// TODO: Implement GetHotelReservationResult
	return &HotelReservationResponse{}, fmt.Errorf("method GetHotelReservationResult not implemented")
}

// Starts flight booking operation and returns operation ID
func (s *DefaultBookingServiceService) StartFlightBooking(ctx context.Context, req *FlightBookingRequest) (*FlightBookingResponse, error) {
	// TODO: Implement StartFlightBooking
	return &FlightBookingResponse{}, fmt.Errorf("method StartFlightBooking not implemented")
}

// Describes flight booking operations
func (s *DefaultBookingServiceService) DescribeFlightBooking(ctx context.Context, req *FlightBookingRequest) (*FlightBookingResponse, error) {
	// TODO: Implement DescribeFlightBooking
	return &FlightBookingResponse{}, fmt.Errorf("method DescribeFlightBooking not implemented")
}

// Gets flight booking results for given operation ID
func (s *DefaultBookingServiceService) GetFlightBookingResult(ctx context.Context, req *FlightBookingRequest) (*FlightBookingResponse, error) {
	// TODO: Implement GetFlightBookingResult
	return &FlightBookingResponse{}, fmt.Errorf("method GetFlightBookingResult not implemented")
}

// Starts travel package booking operation and returns operation ID
func (s *DefaultBookingServiceService) StartTravelPackageBooking(ctx context.Context, req *TravelPackageBookingRequest) (*TravelPackageBookingResponse, error) {
	// TODO: Implement StartTravelPackageBooking
	return &TravelPackageBookingResponse{}, fmt.Errorf("method StartTravelPackageBooking not implemented")
}

// Describes travel package booking operations
func (s *DefaultBookingServiceService) DescribeTravelPackageBooking(ctx context.Context, req *TravelPackageBookingRequest) (*TravelPackageBookingResponse, error) {
	// TODO: Implement DescribeTravelPackageBooking
	return &TravelPackageBookingResponse{}, fmt.Errorf("method DescribeTravelPackageBooking not implemented")
}

// Gets travel package booking results for given operation ID
func (s *DefaultBookingServiceService) GetTravelPackageBookingResult(ctx context.Context, req *TravelPackageBookingRequest) (*TravelPackageBookingResponse, error) {
	// TODO: Implement GetTravelPackageBookingResult
	return &TravelPackageBookingResponse{}, fmt.Errorf("method GetTravelPackageBookingResult not implemented")
}

// Method name constants

const (
	BookingService_StartHotelReservation         = "BookingService_StartHotelReservation"
	BookingService_DescribeHotelReservation      = "BookingService_DescribeHotelReservation"
	BookingService_GetHotelReservationResult     = "BookingService_GetHotelReservationResult"
	BookingService_StartFlightBooking            = "BookingService_StartFlightBooking"
	BookingService_DescribeFlightBooking         = "BookingService_DescribeFlightBooking"
	BookingService_GetFlightBookingResult        = "BookingService_GetFlightBookingResult"
	BookingService_StartTravelPackageBooking     = "BookingService_StartTravelPackageBooking"
	BookingService_DescribeTravelPackageBooking  = "BookingService_DescribeTravelPackageBooking"
	BookingService_GetTravelPackageBookingResult = "BookingService_GetTravelPackageBookingResult"
)

var BookingServiceMethodMetadata = map[string]map[string]string{}

// Client

type Transport interface {
	Send(ctx context.Context, methodName string, inputData interface{}, outputType interface{}) (interface{}, error)
}

type BookingServiceClient struct {
	transport Transport
}

func NewBookingServiceClient(transport Transport) *BookingServiceClient {
	return &BookingServiceClient{transport: transport}
}

// Starts hotel reservation process for given search criteria and returns operation ID
func (c *BookingServiceClient) StartHotelReservation(ctx context.Context, req *HotelReservationRequest) (*HotelReservationResponse, error) {
	if metadata, exists := BookingServiceMethodMetadata[BookingService_StartHotelReservation]; exists {
		ctx = context.WithValue(ctx, "method_metadata", metadata)
	}
	result, err := c.transport.Send(ctx, BookingService_StartHotelReservation, req, (*HotelReservationResponse)(nil))
	if err != nil {
		return nil, err
	}
	if response, ok := result.(*HotelReservationResponse); ok {
		return response, nil
	}
	return nil, fmt.Errorf("invalid response type for StartHotelReservation")
}

// Describes hotel reservation operations
func (c *BookingServiceClient) DescribeHotelReservation(ctx context.Context, req *HotelReservationRequest) (*HotelReservationResponse, error) {
	if metadata, exists := BookingServiceMethodMetadata[BookingService_DescribeHotelReservation]; exists {
		ctx = context.WithValue(ctx, "method_metadata", metadata)
	}
	result, err := c.transport.Send(ctx, BookingService_DescribeHotelReservation, req, (*HotelReservationResponse)(nil))
	if err != nil {
		return nil, err
	}
	if response, ok := result.(*HotelReservationResponse); ok {
		return response, nil
	}
	return nil, fmt.Errorf("invalid response type for DescribeHotelReservation")
}

// Gets hotel reservation details for given operation ID
func (c *BookingServiceClient) GetHotelReservationResult(ctx context.Context, req *HotelReservationRequest) (*HotelReservationResponse, error) {
	if metadata, exists := BookingServiceMethodMetadata[BookingService_GetHotelReservationResult]; exists {
		ctx = context.WithValue(ctx, "method_metadata", metadata)
	}
	result, err := c.transport.Send(ctx, BookingService_GetHotelReservationResult, req, (*HotelReservationResponse)(nil))
	if err != nil {
		return nil, err
	}
	if response, ok := result.(*HotelReservationResponse); ok {
		return response, nil
	}
	return nil, fmt.Errorf("invalid response type for GetHotelReservationResult")
}

// Starts flight booking operation and returns operation ID
func (c *BookingServiceClient) StartFlightBooking(ctx context.Context, req *FlightBookingRequest) (*FlightBookingResponse, error) {
	if metadata, exists := BookingServiceMethodMetadata[BookingService_StartFlightBooking]; exists {
		ctx = context.WithValue(ctx, "method_metadata", metadata)
	}
	result, err := c.transport.Send(ctx, BookingService_StartFlightBooking, req, (*FlightBookingResponse)(nil))
	if err != nil {
		return nil, err
	}
	if response, ok := result.(*FlightBookingResponse); ok {
		return response, nil
	}
	return nil, fmt.Errorf("invalid response type for StartFlightBooking")
}

// Describes flight booking operations
func (c *BookingServiceClient) DescribeFlightBooking(ctx context.Context, req *FlightBookingRequest) (*FlightBookingResponse, error) {
	if metadata, exists := BookingServiceMethodMetadata[BookingService_DescribeFlightBooking]; exists {
		ctx = context.WithValue(ctx, "method_metadata", metadata)
	}
	result, err := c.transport.Send(ctx, BookingService_DescribeFlightBooking, req, (*FlightBookingResponse)(nil))
	if err != nil {
		return nil, err
	}
	if response, ok := result.(*FlightBookingResponse); ok {
		return response, nil
	}
	return nil, fmt.Errorf("invalid response type for DescribeFlightBooking")
}

// Gets flight booking results for given operation ID
func (c *BookingServiceClient) GetFlightBookingResult(ctx context.Context, req *FlightBookingRequest) (*FlightBookingResponse, error) {
	if metadata, exists := BookingServiceMethodMetadata[BookingService_GetFlightBookingResult]; exists {
		ctx = context.WithValue(ctx, "method_metadata", metadata)
	}
	result, err := c.transport.Send(ctx, BookingService_GetFlightBookingResult, req, (*FlightBookingResponse)(nil))
	if err != nil {
		return nil, err
	}
	if response, ok := result.(*FlightBookingResponse); ok {
		return response, nil
	}
	return nil, fmt.Errorf("invalid response type for GetFlightBookingResult")
}

// Starts travel package booking operation and returns operation ID
func (c *BookingServiceClient) StartTravelPackageBooking(ctx context.Context, req *TravelPackageBookingRequest) (*TravelPackageBookingResponse, error) {
	if metadata, exists := BookingServiceMethodMetadata[BookingService_StartTravelPackageBooking]; exists {
		ctx = context.WithValue(ctx, "method_metadata", metadata)
	}
	result, err := c.transport.Send(ctx, BookingService_StartTravelPackageBooking, req, (*TravelPackageBookingResponse)(nil))
	if err != nil {
		return nil, err
	}
	if response, ok := result.(*TravelPackageBookingResponse); ok {
		return response, nil
	}
	return nil, fmt.Errorf("invalid response type for StartTravelPackageBooking")
}

// Describes travel package booking operations
func (c *BookingServiceClient) DescribeTravelPackageBooking(ctx context.Context, req *TravelPackageBookingRequest) (*TravelPackageBookingResponse, error) {
	if metadata, exists := BookingServiceMethodMetadata[BookingService_DescribeTravelPackageBooking]; exists {
		ctx = context.WithValue(ctx, "method_metadata", metadata)
	}
	result, err := c.transport.Send(ctx, BookingService_DescribeTravelPackageBooking, req, (*TravelPackageBookingResponse)(nil))
	if err != nil {
		return nil, err
	}
	if response, ok := result.(*TravelPackageBookingResponse); ok {
		return response, nil
	}
	return nil, fmt.Errorf("invalid response type for DescribeTravelPackageBooking")
}

// Gets travel package booking results for given operation ID
func (c *BookingServiceClient) GetTravelPackageBookingResult(ctx context.Context, req *TravelPackageBookingRequest) (*TravelPackageBookingResponse, error) {
	if metadata, exists := BookingServiceMethodMetadata[BookingService_GetTravelPackageBookingResult]; exists {
		ctx = context.WithValue(ctx, "method_metadata", metadata)
	}
	result, err := c.transport.Send(ctx, BookingService_GetTravelPackageBookingResult, req, (*TravelPackageBookingResponse)(nil))
	if err != nil {
		return nil, err
	}
	if response, ok := result.(*TravelPackageBookingResponse); ok {
		return response, nil
	}
	return nil, fmt.Errorf("invalid response type for GetTravelPackageBookingResult")
}
