// Code generated by protoc-gen-puregen. DO NOT EDIT.

package types

import (
	"context"
	"encoding/json"
	"fmt"
)

// Enums

type OperationType int32

const (
	OperationType_OperationType_UNKNOWN           OperationType = 0
	OperationType_OperationType_HOTEL_RESERVATION               = 1
	OperationType_OperationType_FLIGHT_BOOKING                  = 2
	OperationType_OperationType_TRAVEL_PACKAGE                  = 3
)

var OperationType_name = map[int32]string{
	0: "OperationType_UNKNOWN",
	1: "OperationType_HOTEL_RESERVATION",
	2: "OperationType_FLIGHT_BOOKING",
	3: "OperationType_TRAVEL_PACKAGE",
}

var OperationType_value = map[string]int32{
	"OperationType_UNKNOWN":           0,
	"OperationType_HOTEL_RESERVATION": 1,
	"OperationType_FLIGHT_BOOKING":    2,
	"OperationType_TRAVEL_PACKAGE":    3,
}

func (x OperationType) String() string {
	if name, ok := OperationType_name[int32(x)]; ok {
		return name
	}
	return fmt.Sprintf("OperationType(%d)", x)
}

func ParseOperationType(s string) (OperationType, error) {
	if value, ok := OperationType_value[s]; ok {
		return OperationType(value), nil
	}
	return 0, fmt.Errorf("invalid OperationType value: %s", s)
}

func (x OperationType) IsValid() bool {
	_, ok := OperationType_name[int32(x)]
	return ok
}

type BookingStatus int32

const (
	BookingStatus_BookingStatus_UNKNOWN              BookingStatus = 0
	BookingStatus_BookingStatus_CONFIRMED                          = 1
	BookingStatus_BookingStatus_FAILED                             = 2
	BookingStatus_BookingStatus_PENDING                            = 3
	BookingStatus_BookingStatus_PARTIAL_CONFIRMATION               = 4
	BookingStatus_BookingStatus_CANCELLED                          = 5
)

var BookingStatus_name = map[int32]string{
	0: "BookingStatus_UNKNOWN",
	1: "BookingStatus_CONFIRMED",
	2: "BookingStatus_FAILED",
	3: "BookingStatus_PENDING",
	4: "BookingStatus_PARTIAL_CONFIRMATION",
	5: "BookingStatus_CANCELLED",
}

var BookingStatus_value = map[string]int32{
	"BookingStatus_UNKNOWN":              0,
	"BookingStatus_CONFIRMED":            1,
	"BookingStatus_FAILED":               2,
	"BookingStatus_PENDING":              3,
	"BookingStatus_PARTIAL_CONFIRMATION": 4,
	"BookingStatus_CANCELLED":            5,
}

func (x BookingStatus) String() string {
	if name, ok := BookingStatus_name[int32(x)]; ok {
		return name
	}
	return fmt.Sprintf("BookingStatus(%d)", x)
}

func ParseBookingStatus(s string) (BookingStatus, error) {
	if value, ok := BookingStatus_value[s]; ok {
		return BookingStatus(value), nil
	}
	return 0, fmt.Errorf("invalid BookingStatus value: %s", s)
}

func (x BookingStatus) IsValid() bool {
	_, ok := BookingStatus_name[int32(x)]
	return ok
}

// Messages

type PaymentInfo struct {
	PaymentMethod string `json:"paymentMethod"`
	PaymentToken  string `json:"paymentToken"`
}

func NewPaymentInfo() *PaymentInfo {
	return &PaymentInfo{}
}

func (m *PaymentInfo) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *PaymentInfo) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *PaymentInfo) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

type Error struct {
	Message string `json:"message"`
	Code    string `json:"code"`
}

func NewError() *Error {
	return &Error{}
}

func (m *Error) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *Error) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *Error) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

type BookingHeader struct {
	UserId           string `json:"userId"`
	ApplicationName  string `json:"applicationName"`
	RequestId        string `json:"requestId"`
	RequestTimestamp int64  `json:"requestTimestamp"`
}

func NewBookingHeader() *BookingHeader {
	return &BookingHeader{}
}

func (m *BookingHeader) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *BookingHeader) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *BookingHeader) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

type BookingOperationRequest struct {
	OperationId string       `json:"operationId"`
	PaymentInfo *PaymentInfo `json:"paymentInfo"`
	Confirm     bool         `json:"confirm"`
}

func NewBookingOperationRequest() *BookingOperationRequest {
	return &BookingOperationRequest{}
}

func (m *BookingOperationRequest) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *BookingOperationRequest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *BookingOperationRequest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

type BookingOperationResponse struct {
	OperationId string        `json:"operationId"`
	Status      BookingStatus `json:"status"`
	Error       *Error        `json:"error"`
}

func NewBookingOperationResponse() *BookingOperationResponse {
	return &BookingOperationResponse{}
}

func (m *BookingOperationResponse) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *BookingOperationResponse) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *BookingOperationResponse) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

type ListBookingsRequest struct {
	PaymentInfo *PaymentInfo `json:"paymentInfo"`
}

func NewListBookingsRequest() *ListBookingsRequest {
	return &ListBookingsRequest{}
}

func (m *ListBookingsRequest) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *ListBookingsRequest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *ListBookingsRequest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

type ListBookingsResponse struct {
	ConfirmedBookingIds []string `json:"confirmedBookingIds"`
	PendingBookingIds   []string `json:"pendingBookingIds"`
	Error               *Error   `json:"error"`
}

func NewListBookingsResponse() *ListBookingsResponse {
	return &ListBookingsResponse{}
}

func (m *ListBookingsResponse) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *ListBookingsResponse) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *ListBookingsResponse) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

type BookingConfirmationRequest struct {
	BookingIds  []string     `json:"bookingIds"`
	PaymentInfo *PaymentInfo `json:"paymentInfo"`
}

func NewBookingConfirmationRequest() *BookingConfirmationRequest {
	return &BookingConfirmationRequest{}
}

func (m *BookingConfirmationRequest) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *BookingConfirmationRequest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *BookingConfirmationRequest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

type BookingStatsResponse struct {
	TotalAmountCharged float64 `json:"totalAmountCharged"`
	TotalGuests        int32   `json:"totalGuests"`
	TotalBookings      int32   `json:"totalBookings"`
}

func NewBookingStatsResponse() *BookingStatsResponse {
	return &BookingStatsResponse{}
}

func (m *BookingStatsResponse) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *BookingStatsResponse) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *BookingStatsResponse) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

type HotelReservationRequest_RoomType int32

const (
	HotelReservationRequest_RoomType_UNKNOWN   HotelReservationRequest_RoomType = 0
	HotelReservationRequest_RoomType_STANDARD                                   = 1
	HotelReservationRequest_RoomType_DELUXE                                     = 2
	HotelReservationRequest_RoomType_SUITE                                      = 3
	HotelReservationRequest_RoomType_EXECUTIVE                                  = 4
)

var HotelReservationRequest_RoomType_name = map[int32]string{
	0: "RoomType_UNKNOWN",
	1: "RoomType_STANDARD",
	2: "RoomType_DELUXE",
	3: "RoomType_SUITE",
	4: "RoomType_EXECUTIVE",
}

var HotelReservationRequest_RoomType_value = map[string]int32{
	"RoomType_UNKNOWN":   0,
	"RoomType_STANDARD":  1,
	"RoomType_DELUXE":    2,
	"RoomType_SUITE":     3,
	"RoomType_EXECUTIVE": 4,
}

func (x HotelReservationRequest_RoomType) String() string {
	if name, ok := HotelReservationRequest_RoomType_name[int32(x)]; ok {
		return name
	}
	return fmt.Sprintf("HotelReservationRequest_RoomType(%d)", x)
}

func ParseHotelReservationRequest_RoomType(s string) (HotelReservationRequest_RoomType, error) {
	if value, ok := HotelReservationRequest_RoomType_value[s]; ok {
		return HotelReservationRequest_RoomType(value), nil
	}
	return 0, fmt.Errorf("invalid HotelReservationRequest_RoomType value: %s", s)
}

func (x HotelReservationRequest_RoomType) IsValid() bool {
	_, ok := HotelReservationRequest_RoomType_name[int32(x)]
	return ok
}

type HotelReservationRequest struct {
	HotelLocations   []string                           `json:"hotelLocations"`
	RoomTypes        []HotelReservationRequest_RoomType `json:"roomTypes"`
	MaxPricePerNight float64                            `json:"maxPricePerNight"`
	PaymentInfo      *PaymentInfo                       `json:"paymentInfo"`
	CheckInDate      int64                              `json:"checkInDate"`
	CheckOutDate     int64                              `json:"checkOutDate"`
	NumberOfGuests   int32                              `json:"numberOfGuests"`
}

func NewHotelReservationRequest() *HotelReservationRequest {
	return &HotelReservationRequest{}
}

func (m *HotelReservationRequest) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *HotelReservationRequest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *HotelReservationRequest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

type HotelReservationResponse struct {
	Result       []*HotelReservationResponse_SingleHotelReservationResponse `json:"result"`
	Status       BookingStatus                                              `json:"status"`
	Error        *Error                                                     `json:"error"`
	BookingStats *BookingStatsResponse                                      `json:"bookingStats"`
}

func NewHotelReservationResponse() *HotelReservationResponse {
	return &HotelReservationResponse{}
}

func (m *HotelReservationResponse) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *HotelReservationResponse) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *HotelReservationResponse) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

type HotelReservationResponse_Hotel struct {
	Name          string  `json:"name"`
	Rating        float64 `json:"rating"`
	PricePerNight float64 `json:"pricePerNight"`
	Address       string  `json:"address"`
}

func NewHotelReservationResponse_Hotel() *HotelReservationResponse_Hotel {
	return &HotelReservationResponse_Hotel{}
}

func (m *HotelReservationResponse_Hotel) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *HotelReservationResponse_Hotel) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *HotelReservationResponse_Hotel) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

type HotelReservationResponse_AvailableRoom struct {
	Hotel          *HotelReservationResponse_Hotel  `json:"hotel"`
	RoomType       HotelReservationRequest_RoomType `json:"roomType"`
	AvailableRooms int32                            `json:"availableRooms"`
}

func NewHotelReservationResponse_AvailableRoom() *HotelReservationResponse_AvailableRoom {
	return &HotelReservationResponse_AvailableRoom{}
}

func (m *HotelReservationResponse_AvailableRoom) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *HotelReservationResponse_AvailableRoom) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *HotelReservationResponse_AvailableRoom) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

type HotelReservationResponse_SingleHotelReservationResponse struct {
	AvailableRooms []*HotelReservationResponse_AvailableRoom `json:"availableRooms"`
	Error          *Error                                    `json:"error"`
}

func NewHotelReservationResponse_SingleHotelReservationResponse() *HotelReservationResponse_SingleHotelReservationResponse {
	return &HotelReservationResponse_SingleHotelReservationResponse{}
}

func (m *HotelReservationResponse_SingleHotelReservationResponse) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *HotelReservationResponse_SingleHotelReservationResponse) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *HotelReservationResponse_SingleHotelReservationResponse) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

type FlightBookingRequest struct {
	FlightRoutes                []string     `json:"flightRoutes"`
	PaymentInfo                 *PaymentInfo `json:"paymentInfo"`
	IncludeHotelRecommendations bool         `json:"includeHotelRecommendations"`
	DepartureDate               int64        `json:"departureDate"`
	ReturnDate                  int64        `json:"returnDate"`
	NumberOfPassengers          int32        `json:"numberOfPassengers"`
}

func NewFlightBookingRequest() *FlightBookingRequest {
	return &FlightBookingRequest{}
}

func (m *FlightBookingRequest) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *FlightBookingRequest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *FlightBookingRequest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

type FlightBookingResponse struct {
	FlightBooking []*FlightBookingResponse_SingleFlightBooking `json:"FlightBooking"`
	Error         *Error                                       `json:"error"`
	Status        BookingStatus                                `json:"status"`
	BookingStats  *BookingStatsResponse                        `json:"bookingStats"`
}

func NewFlightBookingResponse() *FlightBookingResponse {
	return &FlightBookingResponse{}
}

func (m *FlightBookingResponse) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *FlightBookingResponse) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *FlightBookingResponse) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

type FlightBookingResponse_SingleFlightBooking struct {
	FlightNumber         string                                                   `json:"flightNumber"`
	Airline              string                                                   `json:"airline"`
	Price                float64                                                  `json:"price"`
	DepartureTime        int64                                                    `json:"departureTime"`
	ArrivalTime          int64                                                    `json:"arrivalTime"`
	Error                *Error                                                   `json:"error"`
	HotelRecommendations *HotelReservationResponse_SingleHotelReservationResponse `json:"hotelRecommendations"`
}

func NewFlightBookingResponse_SingleFlightBooking() *FlightBookingResponse_SingleFlightBooking {
	return &FlightBookingResponse_SingleFlightBooking{}
}

func (m *FlightBookingResponse_SingleFlightBooking) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *FlightBookingResponse_SingleFlightBooking) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *FlightBookingResponse_SingleFlightBooking) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

type TravelPackageBookingRequest struct {
	Destinations []string     `json:"destinations"`
	PaymentInfo  *PaymentInfo `json:"paymentInfo"`
}

func NewTravelPackageBookingRequest() *TravelPackageBookingRequest {
	return &TravelPackageBookingRequest{}
}

func (m *TravelPackageBookingRequest) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *TravelPackageBookingRequest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *TravelPackageBookingRequest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

type TravelPackageBookingResponse struct {
	TravelPackages []*TravelPackageBookingResponse_SingleTravelPackageResponse `json:"travelPackages"`
	Error          *Error                                                      `json:"error"`
	Status         BookingStatus                                               `json:"status"`
	BookingStats   *BookingStatsResponse                                       `json:"bookingStats"`
}

func NewTravelPackageBookingResponse() *TravelPackageBookingResponse {
	return &TravelPackageBookingResponse{}
}

func (m *TravelPackageBookingResponse) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *TravelPackageBookingResponse) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *TravelPackageBookingResponse) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

type TravelPackageBookingResponse_SingleTravelPackageResponse struct {
	PackageName  string  `json:"packageName"`
	Description  string  `json:"description"`
	TotalPrice   float64 `json:"totalPrice"`
	DurationDays int32   `json:"durationDays"`
	Error        *Error  `json:"error"`
}

func NewTravelPackageBookingResponse_SingleTravelPackageResponse() *TravelPackageBookingResponse_SingleTravelPackageResponse {
	return &TravelPackageBookingResponse_SingleTravelPackageResponse{}
}

func (m *TravelPackageBookingResponse_SingleTravelPackageResponse) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *TravelPackageBookingResponse_SingleTravelPackageResponse) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *TravelPackageBookingResponse_SingleTravelPackageResponse) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// Services

type BookingServiceService interface {
	StartHotelReservation(ctx context.Context, req *HotelReservationRequest) (*HotelReservationResponse, error)
	DescribeHotelReservation(ctx context.Context, req *HotelReservationRequest) (*HotelReservationResponse, error)
	GetHotelReservationResult(ctx context.Context, req *HotelReservationRequest) (*HotelReservationResponse, error)
	StartFlightBooking(ctx context.Context, req *FlightBookingRequest) (*FlightBookingResponse, error)
	DescribeFlightBooking(ctx context.Context, req *FlightBookingRequest) (*FlightBookingResponse, error)
	GetFlightBookingResult(ctx context.Context, req *FlightBookingRequest) (*FlightBookingResponse, error)
	StartTravelPackageBooking(ctx context.Context, req *TravelPackageBookingRequest) (*TravelPackageBookingResponse, error)
	DescribeTravelPackageBooking(ctx context.Context, req *TravelPackageBookingRequest) (*TravelPackageBookingResponse, error)
	GetTravelPackageBookingResult(ctx context.Context, req *TravelPackageBookingRequest) (*TravelPackageBookingResponse, error)
}

type DefaultBookingServiceService struct{}

func (s *DefaultBookingServiceService) StartHotelReservation(ctx context.Context, req *HotelReservationRequest) (*HotelReservationResponse, error) {
	// TODO: Implement StartHotelReservation
	return &HotelReservationResponse{}, fmt.Errorf("method StartHotelReservation not implemented")
}

func (s *DefaultBookingServiceService) DescribeHotelReservation(ctx context.Context, req *HotelReservationRequest) (*HotelReservationResponse, error) {
	// TODO: Implement DescribeHotelReservation
	return &HotelReservationResponse{}, fmt.Errorf("method DescribeHotelReservation not implemented")
}

func (s *DefaultBookingServiceService) GetHotelReservationResult(ctx context.Context, req *HotelReservationRequest) (*HotelReservationResponse, error) {
	// TODO: Implement GetHotelReservationResult
	return &HotelReservationResponse{}, fmt.Errorf("method GetHotelReservationResult not implemented")
}

func (s *DefaultBookingServiceService) StartFlightBooking(ctx context.Context, req *FlightBookingRequest) (*FlightBookingResponse, error) {
	// TODO: Implement StartFlightBooking
	return &FlightBookingResponse{}, fmt.Errorf("method StartFlightBooking not implemented")
}

func (s *DefaultBookingServiceService) DescribeFlightBooking(ctx context.Context, req *FlightBookingRequest) (*FlightBookingResponse, error) {
	// TODO: Implement DescribeFlightBooking
	return &FlightBookingResponse{}, fmt.Errorf("method DescribeFlightBooking not implemented")
}

func (s *DefaultBookingServiceService) GetFlightBookingResult(ctx context.Context, req *FlightBookingRequest) (*FlightBookingResponse, error) {
	// TODO: Implement GetFlightBookingResult
	return &FlightBookingResponse{}, fmt.Errorf("method GetFlightBookingResult not implemented")
}

func (s *DefaultBookingServiceService) StartTravelPackageBooking(ctx context.Context, req *TravelPackageBookingRequest) (*TravelPackageBookingResponse, error) {
	// TODO: Implement StartTravelPackageBooking
	return &TravelPackageBookingResponse{}, fmt.Errorf("method StartTravelPackageBooking not implemented")
}

func (s *DefaultBookingServiceService) DescribeTravelPackageBooking(ctx context.Context, req *TravelPackageBookingRequest) (*TravelPackageBookingResponse, error) {
	// TODO: Implement DescribeTravelPackageBooking
	return &TravelPackageBookingResponse{}, fmt.Errorf("method DescribeTravelPackageBooking not implemented")
}

func (s *DefaultBookingServiceService) GetTravelPackageBookingResult(ctx context.Context, req *TravelPackageBookingRequest) (*TravelPackageBookingResponse, error) {
	// TODO: Implement GetTravelPackageBookingResult
	return &TravelPackageBookingResponse{}, fmt.Errorf("method GetTravelPackageBookingResult not implemented")
}

// Method name constants

const (
	BookingService_StartHotelReservation         = "BookingService_StartHotelReservation"
	BookingService_DescribeHotelReservation      = "BookingService_DescribeHotelReservation"
	BookingService_GetHotelReservationResult     = "BookingService_GetHotelReservationResult"
	BookingService_StartFlightBooking            = "BookingService_StartFlightBooking"
	BookingService_DescribeFlightBooking         = "BookingService_DescribeFlightBooking"
	BookingService_GetFlightBookingResult        = "BookingService_GetFlightBookingResult"
	BookingService_StartTravelPackageBooking     = "BookingService_StartTravelPackageBooking"
	BookingService_DescribeTravelPackageBooking  = "BookingService_DescribeTravelPackageBooking"
	BookingService_GetTravelPackageBookingResult = "BookingService_GetTravelPackageBookingResult"
)

// Client

type Transport interface {
	Send(ctx context.Context, methodName string, inputData interface{}, outputType interface{}) (interface{}, error)
}

type BookingServiceClient struct {
	transport Transport
}

func NewBookingServiceClient(transport Transport) *BookingServiceClient {
	return &BookingServiceClient{transport: transport}
}

func (c *BookingServiceClient) StartHotelReservation(ctx context.Context, req *HotelReservationRequest) (*HotelReservationResponse, error) {
	result, err := c.transport.Send(ctx, BookingService_StartHotelReservation, req, (*HotelReservationResponse)(nil))
	if err != nil {
		return nil, err
	}
	if response, ok := result.(*HotelReservationResponse); ok {
		return response, nil
	}
	return nil, fmt.Errorf("invalid response type for StartHotelReservation")
}

func (c *BookingServiceClient) DescribeHotelReservation(ctx context.Context, req *HotelReservationRequest) (*HotelReservationResponse, error) {
	result, err := c.transport.Send(ctx, BookingService_DescribeHotelReservation, req, (*HotelReservationResponse)(nil))
	if err != nil {
		return nil, err
	}
	if response, ok := result.(*HotelReservationResponse); ok {
		return response, nil
	}
	return nil, fmt.Errorf("invalid response type for DescribeHotelReservation")
}

func (c *BookingServiceClient) GetHotelReservationResult(ctx context.Context, req *HotelReservationRequest) (*HotelReservationResponse, error) {
	result, err := c.transport.Send(ctx, BookingService_GetHotelReservationResult, req, (*HotelReservationResponse)(nil))
	if err != nil {
		return nil, err
	}
	if response, ok := result.(*HotelReservationResponse); ok {
		return response, nil
	}
	return nil, fmt.Errorf("invalid response type for GetHotelReservationResult")
}

func (c *BookingServiceClient) StartFlightBooking(ctx context.Context, req *FlightBookingRequest) (*FlightBookingResponse, error) {
	result, err := c.transport.Send(ctx, BookingService_StartFlightBooking, req, (*FlightBookingResponse)(nil))
	if err != nil {
		return nil, err
	}
	if response, ok := result.(*FlightBookingResponse); ok {
		return response, nil
	}
	return nil, fmt.Errorf("invalid response type for StartFlightBooking")
}

func (c *BookingServiceClient) DescribeFlightBooking(ctx context.Context, req *FlightBookingRequest) (*FlightBookingResponse, error) {
	result, err := c.transport.Send(ctx, BookingService_DescribeFlightBooking, req, (*FlightBookingResponse)(nil))
	if err != nil {
		return nil, err
	}
	if response, ok := result.(*FlightBookingResponse); ok {
		return response, nil
	}
	return nil, fmt.Errorf("invalid response type for DescribeFlightBooking")
}

func (c *BookingServiceClient) GetFlightBookingResult(ctx context.Context, req *FlightBookingRequest) (*FlightBookingResponse, error) {
	result, err := c.transport.Send(ctx, BookingService_GetFlightBookingResult, req, (*FlightBookingResponse)(nil))
	if err != nil {
		return nil, err
	}
	if response, ok := result.(*FlightBookingResponse); ok {
		return response, nil
	}
	return nil, fmt.Errorf("invalid response type for GetFlightBookingResult")
}

func (c *BookingServiceClient) StartTravelPackageBooking(ctx context.Context, req *TravelPackageBookingRequest) (*TravelPackageBookingResponse, error) {
	result, err := c.transport.Send(ctx, BookingService_StartTravelPackageBooking, req, (*TravelPackageBookingResponse)(nil))
	if err != nil {
		return nil, err
	}
	if response, ok := result.(*TravelPackageBookingResponse); ok {
		return response, nil
	}
	return nil, fmt.Errorf("invalid response type for StartTravelPackageBooking")
}

func (c *BookingServiceClient) DescribeTravelPackageBooking(ctx context.Context, req *TravelPackageBookingRequest) (*TravelPackageBookingResponse, error) {
	result, err := c.transport.Send(ctx, BookingService_DescribeTravelPackageBooking, req, (*TravelPackageBookingResponse)(nil))
	if err != nil {
		return nil, err
	}
	if response, ok := result.(*TravelPackageBookingResponse); ok {
		return response, nil
	}
	return nil, fmt.Errorf("invalid response type for DescribeTravelPackageBooking")
}

func (c *BookingServiceClient) GetTravelPackageBookingResult(ctx context.Context, req *TravelPackageBookingRequest) (*TravelPackageBookingResponse, error) {
	result, err := c.transport.Send(ctx, BookingService_GetTravelPackageBookingResult, req, (*TravelPackageBookingResponse)(nil))
	if err != nil {
		return nil, err
	}
	if response, ok := result.(*TravelPackageBookingResponse); ok {
		return response, nil
	}
	return nil, fmt.Errorf("invalid response type for GetTravelPackageBookingResult")
}
