// Code generated by protoc-gen-puregen. DO NOT EDIT.

package userv1

import (
	"context"
	"encoding/json"
	"fmt"
)

// Messages

// User message represents a user in the system
type User struct {
	Id       int32        `json:"id"`
	Name     string       `json:"name"`
	Email    string       `json:"email"`
	IsActive bool         `json:"isActive"`
	Tags     []string     `json:"tags"`
	Profile  *UserProfile `json:"profile"`
}

func NewUser() *User {
	return &User{}
}

func (m *User) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *User) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *User) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// UserProfile contains additional user information
type UserProfile struct {
	Bio       string `json:"bio"`
	AvatarUrl string `json:"avatarUrl"`
	CreatedAt int64  `json:"createdAt"`
}

func NewUserProfile() *UserProfile {
	return &UserProfile{}
}

func (m *UserProfile) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *UserProfile) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *UserProfile) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// CreateUserRequest is the request for creating a user
type CreateUserRequest struct {
	Name    string       `json:"name"`
	Email   string       `json:"email"`
	Profile *UserProfile `json:"profile"`
}

func NewCreateUserRequest() *CreateUserRequest {
	return &CreateUserRequest{}
}

func (m *CreateUserRequest) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *CreateUserRequest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *CreateUserRequest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// CreateUserResponse is the response for creating a user
type CreateUserResponse struct {
	User    *User  `json:"user"`
	Success bool   `json:"success"`
	Message string `json:"message"`
}

func NewCreateUserResponse() *CreateUserResponse {
	return &CreateUserResponse{}
}

func (m *CreateUserResponse) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *CreateUserResponse) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *CreateUserResponse) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// GetUserRequest is the request for getting a user
type GetUserRequest struct {
	Id int32 `json:"id"`
}

func NewGetUserRequest() *GetUserRequest {
	return &GetUserRequest{}
}

func (m *GetUserRequest) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *GetUserRequest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *GetUserRequest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// GetUserResponse is the response for getting a user
type GetUserResponse struct {
	User  *User `json:"user"`
	Found bool  `json:"found"`
}

func NewGetUserResponse() *GetUserResponse {
	return &GetUserResponse{}
}

func (m *GetUserResponse) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *GetUserResponse) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *GetUserResponse) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// Services

// UserService provides operations for managing users
type UserServiceService interface {
	// CreateUser creates a new user
	CreateUser(ctx context.Context, req *CreateUserRequest) (*CreateUserResponse, error)
	// GetUser retrieves a user by ID
	GetUser(ctx context.Context, req *GetUserRequest) (*GetUserResponse, error)
}

type DefaultUserServiceService struct{}

// CreateUser creates a new user
func (s *DefaultUserServiceService) CreateUser(ctx context.Context, req *CreateUserRequest) (*CreateUserResponse, error) {
	// TODO: Implement CreateUser
	return &CreateUserResponse{}, fmt.Errorf("method CreateUser not implemented")
}

// GetUser retrieves a user by ID
func (s *DefaultUserServiceService) GetUser(ctx context.Context, req *GetUserRequest) (*GetUserResponse, error) {
	// TODO: Implement GetUser
	return &GetUserResponse{}, fmt.Errorf("method GetUser not implemented")
}

// Method name constants

const (
	UserService_CreateUser = "UserService_CreateUser"
	UserService_GetUser    = "UserService_GetUser"
)

// Client

type Transport interface {
	Send(ctx context.Context, methodName string, inputData interface{}, outputType interface{}) (interface{}, error)
}

type UserServiceClient struct {
	transport Transport
}

func NewUserServiceClient(transport Transport) *UserServiceClient {
	return &UserServiceClient{transport: transport}
}

// CreateUser creates a new user
func (c *UserServiceClient) CreateUser(ctx context.Context, req *CreateUserRequest) (*CreateUserResponse, error) {
	result, err := c.transport.Send(ctx, UserService_CreateUser, req, (*CreateUserResponse)(nil))
	if err != nil {
		return nil, err
	}
	if response, ok := result.(*CreateUserResponse); ok {
		return response, nil
	}
	return nil, fmt.Errorf("invalid response type for CreateUser")
}

// GetUser retrieves a user by ID
func (c *UserServiceClient) GetUser(ctx context.Context, req *GetUserRequest) (*GetUserResponse, error) {
	result, err := c.transport.Send(ctx, UserService_GetUser, req, (*GetUserResponse)(nil))
	if err != nil {
		return nil, err
	}
	if response, ok := result.(*GetUserResponse); ok {
		return response, nil
	}
	return nil, fmt.Errorf("invalid response type for GetUser")
}
