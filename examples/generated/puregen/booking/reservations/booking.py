# Code generated by protoc-gen-puregen. DO NOT EDIT.

from dataclasses import dataclass, field
from typing import Optional, List, Dict, Any
from abc import ABC, abstractmethod
import json
from enum import IntEnum
from .puregen_transport import PuregenTransport

# Enums

# Operation types for booking system
class OperationType(IntEnum):
    """OperationType enum values as integers"""
    OPERATIONTYPE_UNKNOWN = 0
    OPERATIONTYPE_HOTEL_RESERVATION = 1
    OPERATIONTYPE_FLIGHT_BOOKING = 2
    OPERATIONTYPE_TRAVEL_PACKAGE = 3

    @classmethod
    def is_valid(cls, value: int) -> bool:
        """Check if value is a valid OperationType"""
        return value in [item.value for item in cls]

# Status of the booking request
class BookingStatus:
    """BookingStatus enum values as string constants"""
    BOOKINGSTATUS_UNKNOWN = "BookingStatus_UNKNOWN"
    BOOKINGSTATUS_CONFIRMED = "BookingStatus_CONFIRMED"
    BOOKINGSTATUS_FAILED = "BookingStatus_FAILED"
    BOOKINGSTATUS_PENDING = "BookingStatus_PENDING"
    BOOKINGSTATUS_PARTIAL_CONFIRMATION = "BookingStatus_PARTIAL_CONFIRMATION"
    BOOKINGSTATUS_CANCELLED = "BookingStatus_CANCELLED"

    VALUES = [
        BOOKINGSTATUS_UNKNOWN,
        BOOKINGSTATUS_CONFIRMED,
        BOOKINGSTATUS_FAILED,
        BOOKINGSTATUS_PENDING,
        BOOKINGSTATUS_PARTIAL_CONFIRMATION,
        BOOKINGSTATUS_CANCELLED,
    ]

    @classmethod
    def is_valid(cls, value: str) -> bool:
        """Check if value is a valid BookingStatus"""
        return value in cls.VALUES

# Enum for room types
class HotelReservationRequest_RoomType:
    """HotelReservationRequest_RoomType enum values as string constants"""
    ROOMTYPE_UNKNOWN = "RoomType_UNKNOWN"
    ROOMTYPE_STANDARD = "RoomType_STANDARD"
    ROOMTYPE_DELUXE = "RoomType_DELUXE"
    ROOMTYPE_SUITE = "RoomType_SUITE"
    ROOMTYPE_EXECUTIVE = "RoomType_EXECUTIVE"

    VALUES = [
        ROOMTYPE_UNKNOWN,
        ROOMTYPE_STANDARD,
        ROOMTYPE_DELUXE,
        ROOMTYPE_SUITE,
        ROOMTYPE_EXECUTIVE,
    ]

    @classmethod
    def is_valid(cls, value: str) -> bool:
        """Check if value is a valid HotelReservationRequest_RoomType"""
        return value in cls.VALUES

# Messages

# Payment information
@dataclass
class PaymentInfo:
    """Generated message class for PaymentInfo"""
    # Payment method (e.g., credit card, PayPal)
    payment_method: str = ""
    # Card token or payment reference
    payment_token: str = ""
    operation_type: int = 0

    def validate(self) -> bool:
        """Validate the message fields"""
        # Add custom validation logic here
        return True

    def to_json(self) -> str:
        """Convert message to JSON string"""
        return json.dumps(self.to_dict())

    def to_dict(self) -> Dict[str, Any]:
        """Convert message to dictionary"""
        result = {}
        if self.payment_method is not None:
            result['paymentMethod'] = self.payment_method
        if self.payment_token is not None:
            result['paymentToken'] = self.payment_token
        if self.operation_type is not None:
            result['operationType'] = self.operation_type
        return result

    @classmethod
    def from_json(cls, json_str: str) -> 'PaymentInfo':
        """Create message from JSON string"""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'PaymentInfo':
        """Create message from dictionary"""
        kwargs = {}
        if 'paymentMethod' in data:
            kwargs['payment_method'] = data['paymentMethod']
        if 'paymentToken' in data:
            kwargs['payment_token'] = data['paymentToken']
        if 'operationType' in data:
            kwargs['operation_type'] = data['operationType']
        return cls(**kwargs)

# Error Response
@dataclass
class Error:
    """Generated message class for Error"""
    # Error message
    message: str = ""
    # Error code
    code: str = ""

    def validate(self) -> bool:
        """Validate the message fields"""
        # Add custom validation logic here
        return True

    def to_json(self) -> str:
        """Convert message to JSON string"""
        return json.dumps(self.to_dict())

    def to_dict(self) -> Dict[str, Any]:
        """Convert message to dictionary"""
        result = {}
        if self.message is not None:
            result['message'] = self.message
        if self.code is not None:
            result['code'] = self.code
        return result

    @classmethod
    def from_json(cls, json_str: str) -> 'Error':
        """Create message from JSON string"""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Error':
        """Create message from dictionary"""
        kwargs = {}
        if 'message' in data:
            kwargs['message'] = data['message']
        if 'code' in data:
            kwargs['code'] = data['code']
        return cls(**kwargs)

# Information about the user making the booking request
@dataclass
class BookingHeader:
    """Generated message class for BookingHeader"""
    # User who initiated the booking request
    user_id: str = ""
    # Application from which the request originated
    application_name: str = ""
    # Booking request ID
    request_id: str = ""
    # Request timestamp
    request_timestamp: int = 0

    def validate(self) -> bool:
        """Validate the message fields"""
        # Add custom validation logic here
        return True

    def to_json(self) -> str:
        """Convert message to JSON string"""
        return json.dumps(self.to_dict())

    def to_dict(self) -> Dict[str, Any]:
        """Convert message to dictionary"""
        result = {}
        if self.user_id is not None:
            result['userId'] = self.user_id
        if self.application_name is not None:
            result['applicationName'] = self.application_name
        if self.request_id is not None:
            result['requestId'] = self.request_id
        if self.request_timestamp is not None:
            result['requestTimestamp'] = self.request_timestamp
        return result

    @classmethod
    def from_json(cls, json_str: str) -> 'BookingHeader':
        """Create message from JSON string"""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'BookingHeader':
        """Create message from dictionary"""
        kwargs = {}
        if 'userId' in data:
            kwargs['user_id'] = data['userId']
        if 'applicationName' in data:
            kwargs['application_name'] = data['applicationName']
        if 'requestId' in data:
            kwargs['request_id'] = data['requestId']
        if 'requestTimestamp' in data:
            kwargs['request_timestamp'] = data['requestTimestamp']
        return cls(**kwargs)

@dataclass
class BookingOperationRequest:
    """Generated message class for BookingOperationRequest"""
    # Operation ID
    operation_id: str = ""
    # Payment info used during original request
    payment_info: Optional['PaymentInfo'] = None
    # Confirm the booking
    confirm: bool = False

    def validate(self) -> bool:
        """Validate the message fields"""
        # Add custom validation logic here
        return True

    def to_json(self) -> str:
        """Convert message to JSON string"""
        return json.dumps(self.to_dict())

    def to_dict(self) -> Dict[str, Any]:
        """Convert message to dictionary"""
        result = {}
        if self.operation_id is not None:
            result['operationId'] = self.operation_id
        if self.payment_info is not None:
            result['paymentInfo'] = self.payment_info.to_dict() if hasattr(self.payment_info, 'to_dict') else self.payment_info
        if self.confirm is not None:
            result['confirm'] = self.confirm
        return result

    @classmethod
    def from_json(cls, json_str: str) -> 'BookingOperationRequest':
        """Create message from JSON string"""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'BookingOperationRequest':
        """Create message from dictionary"""
        kwargs = {}
        if 'operationId' in data:
            kwargs['operation_id'] = data['operationId']
        if 'paymentInfo' in data:
            kwargs['payment_info'] = PaymentInfo.from_dict(data['paymentInfo']) if isinstance(data['paymentInfo'], dict) else data['paymentInfo']
        if 'confirm' in data:
            kwargs['confirm'] = data['confirm']
        return cls(**kwargs)

# Response for booking operations
@dataclass
class BookingOperationResponse:
    """Generated message class for BookingOperationResponse"""
    # Operation ID
    operation_id: str = ""
    # Status of the booking
    status: str = 0
    # Error message
    error: Optional['Error'] = None

    def validate(self) -> bool:
        """Validate the message fields"""
        # Add custom validation logic here
        return True

    def to_json(self) -> str:
        """Convert message to JSON string"""
        return json.dumps(self.to_dict())

    def to_dict(self) -> Dict[str, Any]:
        """Convert message to dictionary"""
        result = {}
        if self.operation_id is not None:
            result['operationId'] = self.operation_id
        if self.status is not None:
            result['status'] = self.status
        if self.error is not None:
            result['error'] = self.error.to_dict() if hasattr(self.error, 'to_dict') else self.error
        return result

    @classmethod
    def from_json(cls, json_str: str) -> 'BookingOperationResponse':
        """Create message from JSON string"""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'BookingOperationResponse':
        """Create message from dictionary"""
        kwargs = {}
        if 'operationId' in data:
            kwargs['operation_id'] = data['operationId']
        if 'status' in data:
            kwargs['status'] = data['status']
        if 'error' in data:
            kwargs['error'] = Error.from_dict(data['error']) if isinstance(data['error'], dict) else data['error']
        return cls(**kwargs)

@dataclass
class ListBookingsRequest:
    """Generated message class for ListBookingsRequest"""
    # Payment info used during original request
    payment_info: Optional['PaymentInfo'] = None

    def validate(self) -> bool:
        """Validate the message fields"""
        # Add custom validation logic here
        return True

    def to_json(self) -> str:
        """Convert message to JSON string"""
        return json.dumps(self.to_dict())

    def to_dict(self) -> Dict[str, Any]:
        """Convert message to dictionary"""
        result = {}
        if self.payment_info is not None:
            result['paymentInfo'] = self.payment_info.to_dict() if hasattr(self.payment_info, 'to_dict') else self.payment_info
        return result

    @classmethod
    def from_json(cls, json_str: str) -> 'ListBookingsRequest':
        """Create message from JSON string"""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'ListBookingsRequest':
        """Create message from dictionary"""
        kwargs = {}
        if 'paymentInfo' in data:
            kwargs['payment_info'] = PaymentInfo.from_dict(data['paymentInfo']) if isinstance(data['paymentInfo'], dict) else data['paymentInfo']
        return cls(**kwargs)

# Response for list bookings
@dataclass
class ListBookingsResponse:
    """Generated message class for ListBookingsResponse"""
    # List of confirmed booking IDs
    confirmed_booking_ids: List[str] = field(default_factory=list)
    # Pending booking IDs
    pending_booking_ids: List[str] = field(default_factory=list)
    # Error message
    error: Optional['Error'] = None

    def validate(self) -> bool:
        """Validate the message fields"""
        # Add custom validation logic here
        return True

    def to_json(self) -> str:
        """Convert message to JSON string"""
        return json.dumps(self.to_dict())

    def to_dict(self) -> Dict[str, Any]:
        """Convert message to dictionary"""
        result = {}
        if self.confirmed_booking_ids is not None:
            result['confirmedBookingIds'] = self.confirmed_booking_ids
        if self.pending_booking_ids is not None:
            result['pendingBookingIds'] = self.pending_booking_ids
        if self.error is not None:
            result['error'] = self.error.to_dict() if hasattr(self.error, 'to_dict') else self.error
        return result

    @classmethod
    def from_json(cls, json_str: str) -> 'ListBookingsResponse':
        """Create message from JSON string"""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'ListBookingsResponse':
        """Create message from dictionary"""
        kwargs = {}
        if 'confirmedBookingIds' in data:
            kwargs['confirmed_booking_ids'] = data['confirmedBookingIds']
        if 'pendingBookingIds' in data:
            kwargs['pending_booking_ids'] = data['pendingBookingIds']
        if 'error' in data:
            kwargs['error'] = Error.from_dict(data['error']) if isinstance(data['error'], dict) else data['error']
        return cls(**kwargs)

@dataclass
class BookingConfirmationRequest:
    """Generated message class for BookingConfirmationRequest"""
    # Booking ID
    booking_ids: List[str] = field(default_factory=list)
    # Payment info used during original request
    payment_info: Optional['PaymentInfo'] = None

    def validate(self) -> bool:
        """Validate the message fields"""
        # Add custom validation logic here
        return True

    def to_json(self) -> str:
        """Convert message to JSON string"""
        return json.dumps(self.to_dict())

    def to_dict(self) -> Dict[str, Any]:
        """Convert message to dictionary"""
        result = {}
        if self.booking_ids is not None:
            result['bookingIds'] = self.booking_ids
        if self.payment_info is not None:
            result['paymentInfo'] = self.payment_info.to_dict() if hasattr(self.payment_info, 'to_dict') else self.payment_info
        return result

    @classmethod
    def from_json(cls, json_str: str) -> 'BookingConfirmationRequest':
        """Create message from JSON string"""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'BookingConfirmationRequest':
        """Create message from dictionary"""
        kwargs = {}
        if 'bookingIds' in data:
            kwargs['booking_ids'] = data['bookingIds']
        if 'paymentInfo' in data:
            kwargs['payment_info'] = PaymentInfo.from_dict(data['paymentInfo']) if isinstance(data['paymentInfo'], dict) else data['paymentInfo']
        return cls(**kwargs)

@dataclass
class BookingStatsResponse:
    """Generated message class for BookingStatsResponse"""
    # Total amount charged
    total_amount_charged: float = 0.0
    # Total number of guests
    total_guests: int = 0
    # Total bookings
    total_bookings: int = 0

    def validate(self) -> bool:
        """Validate the message fields"""
        # Add custom validation logic here
        return True

    def to_json(self) -> str:
        """Convert message to JSON string"""
        return json.dumps(self.to_dict())

    def to_dict(self) -> Dict[str, Any]:
        """Convert message to dictionary"""
        result = {}
        if self.total_amount_charged is not None:
            result['totalAmountCharged'] = self.total_amount_charged
        if self.total_guests is not None:
            result['totalGuests'] = self.total_guests
        if self.total_bookings is not None:
            result['totalBookings'] = self.total_bookings
        return result

    @classmethod
    def from_json(cls, json_str: str) -> 'BookingStatsResponse':
        """Create message from JSON string"""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'BookingStatsResponse':
        """Create message from dictionary"""
        kwargs = {}
        if 'totalAmountCharged' in data:
            kwargs['total_amount_charged'] = data['totalAmountCharged']
        if 'totalGuests' in data:
            kwargs['total_guests'] = data['totalGuests']
        if 'totalBookings' in data:
            kwargs['total_bookings'] = data['totalBookings']
        return cls(**kwargs)

# Request for hotel reservation
@dataclass
class HotelReservationRequest:
    """Generated message class for HotelReservationRequest"""
    # Hotel search criteria
    hotel_locations: List[str] = field(default_factory=list)
    # List of preferred room types
    room_types: List[str] = field(default_factory=list)
    # Maximum price per night
    max_price_per_night: float = 0.0
    # Required payment information
    payment_info: Optional['PaymentInfo'] = None
    # Check-in and check-out dates (Unix timestamp)
    check_in_date: int = 0
    check_out_date: int = 0
    # Number of guests
    number_of_guests: int = 0

    def validate(self) -> bool:
        """Validate the message fields"""
        # Add custom validation logic here
        return True

    def to_json(self) -> str:
        """Convert message to JSON string"""
        return json.dumps(self.to_dict())

    def to_dict(self) -> Dict[str, Any]:
        """Convert message to dictionary"""
        result = {}
        if self.hotel_locations is not None:
            result['hotelLocations'] = self.hotel_locations
        if self.room_types is not None:
            result['roomTypes'] = self.room_types
        if self.max_price_per_night is not None:
            result['maxPricePerNight'] = self.max_price_per_night
        if self.payment_info is not None:
            result['paymentInfo'] = self.payment_info.to_dict() if hasattr(self.payment_info, 'to_dict') else self.payment_info
        if self.check_in_date is not None:
            result['checkInDate'] = self.check_in_date
        if self.check_out_date is not None:
            result['checkOutDate'] = self.check_out_date
        if self.number_of_guests is not None:
            result['numberOfGuests'] = self.number_of_guests
        return result

    @classmethod
    def from_json(cls, json_str: str) -> 'HotelReservationRequest':
        """Create message from JSON string"""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'HotelReservationRequest':
        """Create message from dictionary"""
        kwargs = {}
        if 'hotelLocations' in data:
            kwargs['hotel_locations'] = data['hotelLocations']
        if 'roomTypes' in data:
            kwargs['room_types'] = data['roomTypes']
        if 'maxPricePerNight' in data:
            kwargs['max_price_per_night'] = data['maxPricePerNight']
        if 'paymentInfo' in data:
            kwargs['payment_info'] = PaymentInfo.from_dict(data['paymentInfo']) if isinstance(data['paymentInfo'], dict) else data['paymentInfo']
        if 'checkInDate' in data:
            kwargs['check_in_date'] = data['checkInDate']
        if 'checkOutDate' in data:
            kwargs['check_out_date'] = data['checkOutDate']
        if 'numberOfGuests' in data:
            kwargs['number_of_guests'] = data['numberOfGuests']
        return cls(**kwargs)

# Response for hotel reservation
@dataclass
class HotelReservationResponse:
    """Generated message class for HotelReservationResponse"""
    # List of results for each search location
    result: List['HotelReservationResponse_SingleHotelReservationResponse'] = field(default_factory=list)
    # Status of the request
    status: str = 0
    # Error message
    error: Optional['Error'] = None
    # Booking stats
    booking_stats: Optional['BookingStatsResponse'] = None

    def validate(self) -> bool:
        """Validate the message fields"""
        # Add custom validation logic here
        return True

    def to_json(self) -> str:
        """Convert message to JSON string"""
        return json.dumps(self.to_dict())

    def to_dict(self) -> Dict[str, Any]:
        """Convert message to dictionary"""
        result = {}
        if self.result is not None:
            result['result'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in self.result]
        if self.status is not None:
            result['status'] = self.status
        if self.error is not None:
            result['error'] = self.error.to_dict() if hasattr(self.error, 'to_dict') else self.error
        if self.booking_stats is not None:
            result['bookingStats'] = self.booking_stats.to_dict() if hasattr(self.booking_stats, 'to_dict') else self.booking_stats
        return result

    @classmethod
    def from_json(cls, json_str: str) -> 'HotelReservationResponse':
        """Create message from JSON string"""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'HotelReservationResponse':
        """Create message from dictionary"""
        kwargs = {}
        if 'result' in data:
            kwargs['result'] = [HotelReservationResponse_SingleHotelReservationResponse.from_dict(item) if isinstance(item, dict) else item for item in data['result']]
        if 'status' in data:
            kwargs['status'] = data['status']
        if 'error' in data:
            kwargs['error'] = Error.from_dict(data['error']) if isinstance(data['error'], dict) else data['error']
        if 'bookingStats' in data:
            kwargs['booking_stats'] = BookingStatsResponse.from_dict(data['bookingStats']) if isinstance(data['bookingStats'], dict) else data['bookingStats']
        return cls(**kwargs)

# Hotel information
@dataclass
class HotelReservationResponse_Hotel:
    """Generated message class for HotelReservationResponse_Hotel"""
    # Name of the hotel
    name: str = ""
    # Hotel rating (1-5 stars)
    rating: float = 0.0
    # Price per night
    price_per_night: float = 0.0
    # Hotel address
    address: str = ""

    def validate(self) -> bool:
        """Validate the message fields"""
        # Add custom validation logic here
        return True

    def to_json(self) -> str:
        """Convert message to JSON string"""
        return json.dumps(self.to_dict())

    def to_dict(self) -> Dict[str, Any]:
        """Convert message to dictionary"""
        result = {}
        if self.name is not None:
            result['name'] = self.name
        if self.rating is not None:
            result['rating'] = self.rating
        if self.price_per_night is not None:
            result['pricePerNight'] = self.price_per_night
        if self.address is not None:
            result['address'] = self.address
        return result

    @classmethod
    def from_json(cls, json_str: str) -> 'HotelReservationResponse_Hotel':
        """Create message from JSON string"""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'HotelReservationResponse_Hotel':
        """Create message from dictionary"""
        kwargs = {}
        if 'name' in data:
            kwargs['name'] = data['name']
        if 'rating' in data:
            kwargs['rating'] = data['rating']
        if 'pricePerNight' in data:
            kwargs['price_per_night'] = data['pricePerNight']
        if 'address' in data:
            kwargs['address'] = data['address']
        return cls(**kwargs)

# Room availability with hotel details
@dataclass
class HotelReservationResponse_AvailableRoom:
    """Generated message class for HotelReservationResponse_AvailableRoom"""
    # Hotel information
    hotel: Optional['HotelReservationResponse_Hotel'] = None
    # Room type
    room_type: str = 0
    # Available rooms count
    available_rooms: int = 0

    def validate(self) -> bool:
        """Validate the message fields"""
        # Add custom validation logic here
        return True

    def to_json(self) -> str:
        """Convert message to JSON string"""
        return json.dumps(self.to_dict())

    def to_dict(self) -> Dict[str, Any]:
        """Convert message to dictionary"""
        result = {}
        if self.hotel is not None:
            result['hotel'] = self.hotel.to_dict() if hasattr(self.hotel, 'to_dict') else self.hotel
        if self.room_type is not None:
            result['roomType'] = self.room_type
        if self.available_rooms is not None:
            result['availableRooms'] = self.available_rooms
        return result

    @classmethod
    def from_json(cls, json_str: str) -> 'HotelReservationResponse_AvailableRoom':
        """Create message from JSON string"""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'HotelReservationResponse_AvailableRoom':
        """Create message from dictionary"""
        kwargs = {}
        if 'hotel' in data:
            kwargs['hotel'] = HotelReservationResponse_Hotel.from_dict(data['hotel']) if isinstance(data['hotel'], dict) else data['hotel']
        if 'roomType' in data:
            kwargs['room_type'] = data['roomType']
        if 'availableRooms' in data:
            kwargs['available_rooms'] = data['availableRooms']
        return cls(**kwargs)

# Hotel reservation result for single location
@dataclass
class HotelReservationResponse_SingleHotelReservationResponse:
    """Generated message class for HotelReservationResponse_SingleHotelReservationResponse"""
    # List of available rooms
    available_rooms: List['HotelReservationResponse_AvailableRoom'] = field(default_factory=list)
    # Error message
    error: Optional['Error'] = None

    def validate(self) -> bool:
        """Validate the message fields"""
        # Add custom validation logic here
        return True

    def to_json(self) -> str:
        """Convert message to JSON string"""
        return json.dumps(self.to_dict())

    def to_dict(self) -> Dict[str, Any]:
        """Convert message to dictionary"""
        result = {}
        if self.available_rooms is not None:
            result['availableRooms'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in self.available_rooms]
        if self.error is not None:
            result['error'] = self.error.to_dict() if hasattr(self.error, 'to_dict') else self.error
        return result

    @classmethod
    def from_json(cls, json_str: str) -> 'HotelReservationResponse_SingleHotelReservationResponse':
        """Create message from JSON string"""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'HotelReservationResponse_SingleHotelReservationResponse':
        """Create message from dictionary"""
        kwargs = {}
        if 'availableRooms' in data:
            kwargs['available_rooms'] = [HotelReservationResponse_AvailableRoom.from_dict(item) if isinstance(item, dict) else item for item in data['availableRooms']]
        if 'error' in data:
            kwargs['error'] = Error.from_dict(data['error']) if isinstance(data['error'], dict) else data['error']
        return cls(**kwargs)

# Request for flight booking
@dataclass
class FlightBookingRequest:
    """Generated message class for FlightBookingRequest"""
    # Flight search criteria
    flight_routes: List[str] = field(default_factory=list)
    # Required payment information
    payment_info: Optional['PaymentInfo'] = None
    # Include hotel recommendations
    include_hotel_recommendations: bool = False
    # Departure and return dates (Unix timestamp)
    departure_date: int = 0
    return_date: int = 0
    # Number of passengers
    number_of_passengers: int = 0

    def validate(self) -> bool:
        """Validate the message fields"""
        # Add custom validation logic here
        return True

    def to_json(self) -> str:
        """Convert message to JSON string"""
        return json.dumps(self.to_dict())

    def to_dict(self) -> Dict[str, Any]:
        """Convert message to dictionary"""
        result = {}
        if self.flight_routes is not None:
            result['flightRoutes'] = self.flight_routes
        if self.payment_info is not None:
            result['paymentInfo'] = self.payment_info.to_dict() if hasattr(self.payment_info, 'to_dict') else self.payment_info
        if self.include_hotel_recommendations is not None:
            result['includeHotelRecommendations'] = self.include_hotel_recommendations
        if self.departure_date is not None:
            result['departureDate'] = self.departure_date
        if self.return_date is not None:
            result['returnDate'] = self.return_date
        if self.number_of_passengers is not None:
            result['numberOfPassengers'] = self.number_of_passengers
        return result

    @classmethod
    def from_json(cls, json_str: str) -> 'FlightBookingRequest':
        """Create message from JSON string"""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'FlightBookingRequest':
        """Create message from dictionary"""
        kwargs = {}
        if 'flightRoutes' in data:
            kwargs['flight_routes'] = data['flightRoutes']
        if 'paymentInfo' in data:
            kwargs['payment_info'] = PaymentInfo.from_dict(data['paymentInfo']) if isinstance(data['paymentInfo'], dict) else data['paymentInfo']
        if 'includeHotelRecommendations' in data:
            kwargs['include_hotel_recommendations'] = data['includeHotelRecommendations']
        if 'departureDate' in data:
            kwargs['departure_date'] = data['departureDate']
        if 'returnDate' in data:
            kwargs['return_date'] = data['returnDate']
        if 'numberOfPassengers' in data:
            kwargs['number_of_passengers'] = data['numberOfPassengers']
        return cls(**kwargs)

# Response for flight booking
@dataclass
class FlightBookingResponse:
    """Generated message class for FlightBookingResponse"""
    # List of flight bookings for each route
    flight_booking: List['FlightBookingResponse_SingleFlightBooking'] = field(default_factory=list)
    # Error message
    error: Optional['Error'] = None
    # Status of the request
    status: str = 0
    # Booking stats
    booking_stats: Optional['BookingStatsResponse'] = None

    def validate(self) -> bool:
        """Validate the message fields"""
        # Add custom validation logic here
        return True

    def to_json(self) -> str:
        """Convert message to JSON string"""
        return json.dumps(self.to_dict())

    def to_dict(self) -> Dict[str, Any]:
        """Convert message to dictionary"""
        result = {}
        if self.flight_booking is not None:
            result['FlightBooking'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in self.flight_booking]
        if self.error is not None:
            result['error'] = self.error.to_dict() if hasattr(self.error, 'to_dict') else self.error
        if self.status is not None:
            result['status'] = self.status
        if self.booking_stats is not None:
            result['bookingStats'] = self.booking_stats.to_dict() if hasattr(self.booking_stats, 'to_dict') else self.booking_stats
        return result

    @classmethod
    def from_json(cls, json_str: str) -> 'FlightBookingResponse':
        """Create message from JSON string"""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'FlightBookingResponse':
        """Create message from dictionary"""
        kwargs = {}
        if 'FlightBooking' in data:
            kwargs['flight_booking'] = [FlightBookingResponse_SingleFlightBooking.from_dict(item) if isinstance(item, dict) else item for item in data['FlightBooking']]
        if 'error' in data:
            kwargs['error'] = Error.from_dict(data['error']) if isinstance(data['error'], dict) else data['error']
        if 'status' in data:
            kwargs['status'] = data['status']
        if 'bookingStats' in data:
            kwargs['booking_stats'] = BookingStatsResponse.from_dict(data['bookingStats']) if isinstance(data['bookingStats'], dict) else data['bookingStats']
        return cls(**kwargs)

# Response for single flight booking
@dataclass
class FlightBookingResponse_SingleFlightBooking:
    """Generated message class for FlightBookingResponse_SingleFlightBooking"""
    # Flight details
    flight_number: str = ""
    # Airline name
    airline: str = ""
    # Flight price
    price: float = 0.0
    # Departure time
    departure_time: int = 0
    # Arrival time
    arrival_time: int = 0
    # Error message
    error: Optional['Error'] = None
    # Hotel recommendations associated with the flight
    hotel_recommendations: Optional['HotelReservationResponse_SingleHotelReservationResponse'] = None

    def validate(self) -> bool:
        """Validate the message fields"""
        # Add custom validation logic here
        return True

    def to_json(self) -> str:
        """Convert message to JSON string"""
        return json.dumps(self.to_dict())

    def to_dict(self) -> Dict[str, Any]:
        """Convert message to dictionary"""
        result = {}
        if self.flight_number is not None:
            result['flightNumber'] = self.flight_number
        if self.airline is not None:
            result['airline'] = self.airline
        if self.price is not None:
            result['price'] = self.price
        if self.departure_time is not None:
            result['departureTime'] = self.departure_time
        if self.arrival_time is not None:
            result['arrivalTime'] = self.arrival_time
        if self.error is not None:
            result['error'] = self.error.to_dict() if hasattr(self.error, 'to_dict') else self.error
        if self.hotel_recommendations is not None:
            result['hotelRecommendations'] = self.hotel_recommendations.to_dict() if hasattr(self.hotel_recommendations, 'to_dict') else self.hotel_recommendations
        return result

    @classmethod
    def from_json(cls, json_str: str) -> 'FlightBookingResponse_SingleFlightBooking':
        """Create message from JSON string"""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'FlightBookingResponse_SingleFlightBooking':
        """Create message from dictionary"""
        kwargs = {}
        if 'flightNumber' in data:
            kwargs['flight_number'] = data['flightNumber']
        if 'airline' in data:
            kwargs['airline'] = data['airline']
        if 'price' in data:
            kwargs['price'] = data['price']
        if 'departureTime' in data:
            kwargs['departure_time'] = data['departureTime']
        if 'arrivalTime' in data:
            kwargs['arrival_time'] = data['arrivalTime']
        if 'error' in data:
            kwargs['error'] = Error.from_dict(data['error']) if isinstance(data['error'], dict) else data['error']
        if 'hotelRecommendations' in data:
            kwargs['hotel_recommendations'] = HotelReservationResponse_SingleHotelReservationResponse.from_dict(data['hotelRecommendations']) if isinstance(data['hotelRecommendations'], dict) else data['hotelRecommendations']
        return cls(**kwargs)

# Request for travel package booking
@dataclass
class TravelPackageBookingRequest:
    """Generated message class for TravelPackageBookingRequest"""
    # Travel destinations
    destinations: List[str] = field(default_factory=list)
    # Required payment information
    payment_info: Optional['PaymentInfo'] = None

    def validate(self) -> bool:
        """Validate the message fields"""
        # Add custom validation logic here
        return True

    def to_json(self) -> str:
        """Convert message to JSON string"""
        return json.dumps(self.to_dict())

    def to_dict(self) -> Dict[str, Any]:
        """Convert message to dictionary"""
        result = {}
        if self.destinations is not None:
            result['destinations'] = self.destinations
        if self.payment_info is not None:
            result['paymentInfo'] = self.payment_info.to_dict() if hasattr(self.payment_info, 'to_dict') else self.payment_info
        return result

    @classmethod
    def from_json(cls, json_str: str) -> 'TravelPackageBookingRequest':
        """Create message from JSON string"""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'TravelPackageBookingRequest':
        """Create message from dictionary"""
        kwargs = {}
        if 'destinations' in data:
            kwargs['destinations'] = data['destinations']
        if 'paymentInfo' in data:
            kwargs['payment_info'] = PaymentInfo.from_dict(data['paymentInfo']) if isinstance(data['paymentInfo'], dict) else data['paymentInfo']
        return cls(**kwargs)

# Response for travel package booking
@dataclass
class TravelPackageBookingResponse:
    """Generated message class for TravelPackageBookingResponse"""
    # List of travel packages for each destination
    travel_packages: List['TravelPackageBookingResponse_SingleTravelPackageResponse'] = field(default_factory=list)
    # Error message
    error: Optional['Error'] = None
    # Status of the request
    status: str = 0
    # Booking stats
    booking_stats: Optional['BookingStatsResponse'] = None

    def validate(self) -> bool:
        """Validate the message fields"""
        # Add custom validation logic here
        return True

    def to_json(self) -> str:
        """Convert message to JSON string"""
        return json.dumps(self.to_dict())

    def to_dict(self) -> Dict[str, Any]:
        """Convert message to dictionary"""
        result = {}
        if self.travel_packages is not None:
            result['travelPackages'] = [item.to_dict() if hasattr(item, 'to_dict') else item for item in self.travel_packages]
        if self.error is not None:
            result['error'] = self.error.to_dict() if hasattr(self.error, 'to_dict') else self.error
        if self.status is not None:
            result['status'] = self.status
        if self.booking_stats is not None:
            result['bookingStats'] = self.booking_stats.to_dict() if hasattr(self.booking_stats, 'to_dict') else self.booking_stats
        return result

    @classmethod
    def from_json(cls, json_str: str) -> 'TravelPackageBookingResponse':
        """Create message from JSON string"""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'TravelPackageBookingResponse':
        """Create message from dictionary"""
        kwargs = {}
        if 'travelPackages' in data:
            kwargs['travel_packages'] = [TravelPackageBookingResponse_SingleTravelPackageResponse.from_dict(item) if isinstance(item, dict) else item for item in data['travelPackages']]
        if 'error' in data:
            kwargs['error'] = Error.from_dict(data['error']) if isinstance(data['error'], dict) else data['error']
        if 'status' in data:
            kwargs['status'] = data['status']
        if 'bookingStats' in data:
            kwargs['booking_stats'] = BookingStatsResponse.from_dict(data['bookingStats']) if isinstance(data['bookingStats'], dict) else data['bookingStats']
        return cls(**kwargs)

# Response for single travel package
@dataclass
class TravelPackageBookingResponse_SingleTravelPackageResponse:
    """Generated message class for TravelPackageBookingResponse_SingleTravelPackageResponse"""
    # Package name
    package_name: str = ""
    # Package description
    description: str = ""
    # Total package price
    total_price: float = 0.0
    # Package duration in days
    duration_days: int = 0
    # Error message
    error: Optional['Error'] = None

    def validate(self) -> bool:
        """Validate the message fields"""
        # Add custom validation logic here
        return True

    def to_json(self) -> str:
        """Convert message to JSON string"""
        return json.dumps(self.to_dict())

    def to_dict(self) -> Dict[str, Any]:
        """Convert message to dictionary"""
        result = {}
        if self.package_name is not None:
            result['packageName'] = self.package_name
        if self.description is not None:
            result['description'] = self.description
        if self.total_price is not None:
            result['totalPrice'] = self.total_price
        if self.duration_days is not None:
            result['durationDays'] = self.duration_days
        if self.error is not None:
            result['error'] = self.error.to_dict() if hasattr(self.error, 'to_dict') else self.error
        return result

    @classmethod
    def from_json(cls, json_str: str) -> 'TravelPackageBookingResponse_SingleTravelPackageResponse':
        """Create message from JSON string"""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'TravelPackageBookingResponse_SingleTravelPackageResponse':
        """Create message from dictionary"""
        kwargs = {}
        if 'packageName' in data:
            kwargs['package_name'] = data['packageName']
        if 'description' in data:
            kwargs['description'] = data['description']
        if 'totalPrice' in data:
            kwargs['total_price'] = data['totalPrice']
        if 'durationDays' in data:
            kwargs['duration_days'] = data['durationDays']
        if 'error' in data:
            kwargs['error'] = Error.from_dict(data['error']) if isinstance(data['error'], dict) else data['error']
        return cls(**kwargs)

# Services

"""
Booking Service provides comprehensive reservation management capabilities including
hotel bookings, flight reservations, and travel package management.
"""
class BookingServiceService(ABC):
    """Abstract service interface for BookingService"""

    # Starts hotel reservation process for given search criteria and returns operation ID
    @abstractmethod
    def start_hotel_reservation(self, ctx: Dict[str, Any], request: HotelReservationRequest) -> HotelReservationResponse:
        """StartHotelReservation method"""
        pass

    # Describes hotel reservation operations
    @abstractmethod
    def describe_hotel_reservation(self, ctx: Dict[str, Any], request: HotelReservationRequest) -> HotelReservationResponse:
        """DescribeHotelReservation method"""
        pass

    # Gets hotel reservation details for given operation ID
    @abstractmethod
    def get_hotel_reservation_result(self, ctx: Dict[str, Any], request: HotelReservationRequest) -> HotelReservationResponse:
        """GetHotelReservationResult method"""
        pass

    # Starts flight booking operation and returns operation ID
    @abstractmethod
    def start_flight_booking(self, ctx: Dict[str, Any], request: FlightBookingRequest) -> FlightBookingResponse:
        """StartFlightBooking method"""
        pass

    # Describes flight booking operations
    @abstractmethod
    def describe_flight_booking(self, ctx: Dict[str, Any], request: FlightBookingRequest) -> FlightBookingResponse:
        """DescribeFlightBooking method"""
        pass

    # Gets flight booking results for given operation ID
    @abstractmethod
    def get_flight_booking_result(self, ctx: Dict[str, Any], request: FlightBookingRequest) -> FlightBookingResponse:
        """GetFlightBookingResult method"""
        pass

    # Starts travel package booking operation and returns operation ID
    @abstractmethod
    def start_travel_package_booking(self, ctx: Dict[str, Any], request: TravelPackageBookingRequest) -> TravelPackageBookingResponse:
        """StartTravelPackageBooking method"""
        pass

    # Describes travel package booking operations
    @abstractmethod
    def describe_travel_package_booking(self, ctx: Dict[str, Any], request: TravelPackageBookingRequest) -> TravelPackageBookingResponse:
        """DescribeTravelPackageBooking method"""
        pass

    # Gets travel package booking results for given operation ID
    @abstractmethod
    def get_travel_package_booking_result(self, ctx: Dict[str, Any], request: TravelPackageBookingRequest) -> TravelPackageBookingResponse:
        """GetTravelPackageBookingResult method"""
        pass

class DefaultBookingServiceService(BookingServiceService):
    """Default implementation of BookingServiceService"""

    # Starts hotel reservation process for given search criteria and returns operation ID
    def start_hotel_reservation(self, ctx: Dict[str, Any], request: HotelReservationRequest) -> HotelReservationResponse:
        """StartHotelReservation method implementation"""
        # TODO: Implement start_hotel_reservation
        raise NotImplementedError("Method start_hotel_reservation not implemented")

    # Describes hotel reservation operations
    def describe_hotel_reservation(self, ctx: Dict[str, Any], request: HotelReservationRequest) -> HotelReservationResponse:
        """DescribeHotelReservation method implementation"""
        # TODO: Implement describe_hotel_reservation
        raise NotImplementedError("Method describe_hotel_reservation not implemented")

    # Gets hotel reservation details for given operation ID
    def get_hotel_reservation_result(self, ctx: Dict[str, Any], request: HotelReservationRequest) -> HotelReservationResponse:
        """GetHotelReservationResult method implementation"""
        # TODO: Implement get_hotel_reservation_result
        raise NotImplementedError("Method get_hotel_reservation_result not implemented")

    # Starts flight booking operation and returns operation ID
    def start_flight_booking(self, ctx: Dict[str, Any], request: FlightBookingRequest) -> FlightBookingResponse:
        """StartFlightBooking method implementation"""
        # TODO: Implement start_flight_booking
        raise NotImplementedError("Method start_flight_booking not implemented")

    # Describes flight booking operations
    def describe_flight_booking(self, ctx: Dict[str, Any], request: FlightBookingRequest) -> FlightBookingResponse:
        """DescribeFlightBooking method implementation"""
        # TODO: Implement describe_flight_booking
        raise NotImplementedError("Method describe_flight_booking not implemented")

    # Gets flight booking results for given operation ID
    def get_flight_booking_result(self, ctx: Dict[str, Any], request: FlightBookingRequest) -> FlightBookingResponse:
        """GetFlightBookingResult method implementation"""
        # TODO: Implement get_flight_booking_result
        raise NotImplementedError("Method get_flight_booking_result not implemented")

    # Starts travel package booking operation and returns operation ID
    def start_travel_package_booking(self, ctx: Dict[str, Any], request: TravelPackageBookingRequest) -> TravelPackageBookingResponse:
        """StartTravelPackageBooking method implementation"""
        # TODO: Implement start_travel_package_booking
        raise NotImplementedError("Method start_travel_package_booking not implemented")

    # Describes travel package booking operations
    def describe_travel_package_booking(self, ctx: Dict[str, Any], request: TravelPackageBookingRequest) -> TravelPackageBookingResponse:
        """DescribeTravelPackageBooking method implementation"""
        # TODO: Implement describe_travel_package_booking
        raise NotImplementedError("Method describe_travel_package_booking not implemented")

    # Gets travel package booking results for given operation ID
    def get_travel_package_booking_result(self, ctx: Dict[str, Any], request: TravelPackageBookingRequest) -> TravelPackageBookingResponse:
        """GetTravelPackageBookingResult method implementation"""
        # TODO: Implement get_travel_package_booking_result
        raise NotImplementedError("Method get_travel_package_booking_result not implemented")

# Method name constants

class BookingServiceMethods:
    """Method name constants for BookingService"""
    BookingService_StartHotelReservation = "BookingService_StartHotelReservation"
    BookingService_DescribeHotelReservation = "BookingService_DescribeHotelReservation"
    BookingService_GetHotelReservationResult = "BookingService_GetHotelReservationResult"
    BookingService_StartFlightBooking = "BookingService_StartFlightBooking"
    BookingService_DescribeFlightBooking = "BookingService_DescribeFlightBooking"
    BookingService_GetFlightBookingResult = "BookingService_GetFlightBookingResult"
    BookingService_StartTravelPackageBooking = "BookingService_StartTravelPackageBooking"
    BookingService_DescribeTravelPackageBooking = "BookingService_DescribeTravelPackageBooking"
    BookingService_GetTravelPackageBookingResult = "BookingService_GetTravelPackageBookingResult"

    METHOD_METADATA = {
    }

# Client

class BookingServiceClient:
    """Client for BookingService service"""

    def __init__(self, transport: PuregenTransport):
        self.transport = transport

    def start_hotel_reservation(self, ctx: Dict[str, Any], request: HotelReservationRequest) -> HotelReservationResponse:
        """StartHotelReservation client method"""
        enhanced_ctx = ctx.copy() if ctx else {}
        method_metadata = BookingServiceMethods.METHOD_METADATA.get(BookingServiceMethods.BookingService_StartHotelReservation, {})
        enhanced_ctx['method_metadata'] = method_metadata
        result = self.transport.send(enhanced_ctx, BookingServiceMethods.BookingService_StartHotelReservation, request, HotelReservationResponse)
        if isinstance(result, HotelReservationResponse):
            return result
        if isinstance(result, dict):
            return HotelReservationResponse.from_dict(result)
        raise ValueError(f"Invalid response type for start_hotel_reservation: {type(result)}")

    def describe_hotel_reservation(self, ctx: Dict[str, Any], request: HotelReservationRequest) -> HotelReservationResponse:
        """DescribeHotelReservation client method"""
        enhanced_ctx = ctx.copy() if ctx else {}
        method_metadata = BookingServiceMethods.METHOD_METADATA.get(BookingServiceMethods.BookingService_DescribeHotelReservation, {})
        enhanced_ctx['method_metadata'] = method_metadata
        result = self.transport.send(enhanced_ctx, BookingServiceMethods.BookingService_DescribeHotelReservation, request, HotelReservationResponse)
        if isinstance(result, HotelReservationResponse):
            return result
        if isinstance(result, dict):
            return HotelReservationResponse.from_dict(result)
        raise ValueError(f"Invalid response type for describe_hotel_reservation: {type(result)}")

    def get_hotel_reservation_result(self, ctx: Dict[str, Any], request: HotelReservationRequest) -> HotelReservationResponse:
        """GetHotelReservationResult client method"""
        enhanced_ctx = ctx.copy() if ctx else {}
        method_metadata = BookingServiceMethods.METHOD_METADATA.get(BookingServiceMethods.BookingService_GetHotelReservationResult, {})
        enhanced_ctx['method_metadata'] = method_metadata
        result = self.transport.send(enhanced_ctx, BookingServiceMethods.BookingService_GetHotelReservationResult, request, HotelReservationResponse)
        if isinstance(result, HotelReservationResponse):
            return result
        if isinstance(result, dict):
            return HotelReservationResponse.from_dict(result)
        raise ValueError(f"Invalid response type for get_hotel_reservation_result: {type(result)}")

    def start_flight_booking(self, ctx: Dict[str, Any], request: FlightBookingRequest) -> FlightBookingResponse:
        """StartFlightBooking client method"""
        enhanced_ctx = ctx.copy() if ctx else {}
        method_metadata = BookingServiceMethods.METHOD_METADATA.get(BookingServiceMethods.BookingService_StartFlightBooking, {})
        enhanced_ctx['method_metadata'] = method_metadata
        result = self.transport.send(enhanced_ctx, BookingServiceMethods.BookingService_StartFlightBooking, request, FlightBookingResponse)
        if isinstance(result, FlightBookingResponse):
            return result
        if isinstance(result, dict):
            return FlightBookingResponse.from_dict(result)
        raise ValueError(f"Invalid response type for start_flight_booking: {type(result)}")

    def describe_flight_booking(self, ctx: Dict[str, Any], request: FlightBookingRequest) -> FlightBookingResponse:
        """DescribeFlightBooking client method"""
        enhanced_ctx = ctx.copy() if ctx else {}
        method_metadata = BookingServiceMethods.METHOD_METADATA.get(BookingServiceMethods.BookingService_DescribeFlightBooking, {})
        enhanced_ctx['method_metadata'] = method_metadata
        result = self.transport.send(enhanced_ctx, BookingServiceMethods.BookingService_DescribeFlightBooking, request, FlightBookingResponse)
        if isinstance(result, FlightBookingResponse):
            return result
        if isinstance(result, dict):
            return FlightBookingResponse.from_dict(result)
        raise ValueError(f"Invalid response type for describe_flight_booking: {type(result)}")

    def get_flight_booking_result(self, ctx: Dict[str, Any], request: FlightBookingRequest) -> FlightBookingResponse:
        """GetFlightBookingResult client method"""
        enhanced_ctx = ctx.copy() if ctx else {}
        method_metadata = BookingServiceMethods.METHOD_METADATA.get(BookingServiceMethods.BookingService_GetFlightBookingResult, {})
        enhanced_ctx['method_metadata'] = method_metadata
        result = self.transport.send(enhanced_ctx, BookingServiceMethods.BookingService_GetFlightBookingResult, request, FlightBookingResponse)
        if isinstance(result, FlightBookingResponse):
            return result
        if isinstance(result, dict):
            return FlightBookingResponse.from_dict(result)
        raise ValueError(f"Invalid response type for get_flight_booking_result: {type(result)}")

    def start_travel_package_booking(self, ctx: Dict[str, Any], request: TravelPackageBookingRequest) -> TravelPackageBookingResponse:
        """StartTravelPackageBooking client method"""
        enhanced_ctx = ctx.copy() if ctx else {}
        method_metadata = BookingServiceMethods.METHOD_METADATA.get(BookingServiceMethods.BookingService_StartTravelPackageBooking, {})
        enhanced_ctx['method_metadata'] = method_metadata
        result = self.transport.send(enhanced_ctx, BookingServiceMethods.BookingService_StartTravelPackageBooking, request, TravelPackageBookingResponse)
        if isinstance(result, TravelPackageBookingResponse):
            return result
        if isinstance(result, dict):
            return TravelPackageBookingResponse.from_dict(result)
        raise ValueError(f"Invalid response type for start_travel_package_booking: {type(result)}")

    def describe_travel_package_booking(self, ctx: Dict[str, Any], request: TravelPackageBookingRequest) -> TravelPackageBookingResponse:
        """DescribeTravelPackageBooking client method"""
        enhanced_ctx = ctx.copy() if ctx else {}
        method_metadata = BookingServiceMethods.METHOD_METADATA.get(BookingServiceMethods.BookingService_DescribeTravelPackageBooking, {})
        enhanced_ctx['method_metadata'] = method_metadata
        result = self.transport.send(enhanced_ctx, BookingServiceMethods.BookingService_DescribeTravelPackageBooking, request, TravelPackageBookingResponse)
        if isinstance(result, TravelPackageBookingResponse):
            return result
        if isinstance(result, dict):
            return TravelPackageBookingResponse.from_dict(result)
        raise ValueError(f"Invalid response type for describe_travel_package_booking: {type(result)}")

    def get_travel_package_booking_result(self, ctx: Dict[str, Any], request: TravelPackageBookingRequest) -> TravelPackageBookingResponse:
        """GetTravelPackageBookingResult client method"""
        enhanced_ctx = ctx.copy() if ctx else {}
        method_metadata = BookingServiceMethods.METHOD_METADATA.get(BookingServiceMethods.BookingService_GetTravelPackageBookingResult, {})
        enhanced_ctx['method_metadata'] = method_metadata
        result = self.transport.send(enhanced_ctx, BookingServiceMethods.BookingService_GetTravelPackageBookingResult, request, TravelPackageBookingResponse)
        if isinstance(result, TravelPackageBookingResponse):
            return result
        if isinstance(result, dict):
            return TravelPackageBookingResponse.from_dict(result)
        raise ValueError(f"Invalid response type for get_travel_package_booking_result: {type(result)}")

