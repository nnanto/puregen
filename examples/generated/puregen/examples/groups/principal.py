# Code generated by protoc-gen-puregen. DO NOT EDIT.

from dataclasses import dataclass, field
from typing import Optional, List, Dict, Any
from abc import ABC, abstractmethod
import json

# Messages

@dataclass
class Principal:
    """Generated message class for Principal"""
    # Unique identifier for the principal
    id: str = ""
    # Name of the principal
    name: str = ""
    # Type of the principal (e.g., "user", "group")
    type: str = ""
    # Roles assigned to the principal
    roles: List[str] = field(default_factory=list)

    def validate(self) -> bool:
        """Validate the message fields"""
        # Add custom validation logic here
        return True

    def to_json(self) -> str:
        """Convert message to JSON string"""
        return json.dumps(self.to_dict())

    def to_dict(self) -> Dict[str, Any]:
        """Convert message to dictionary"""
        result = {}
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.type is not None:
            result['type'] = self.type
        if self.roles is not None:
            result['roles'] = self.roles
        return result

    @classmethod
    def from_json(cls, json_str: str) -> 'Principal':
        """Create message from JSON string"""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Principal':
        """Create message from dictionary"""
        kwargs = {}
        if 'id' in data:
            kwargs['id'] = data['id']
        if 'name' in data:
            kwargs['name'] = data['name']
        if 'type' in data:
            kwargs['type'] = data['type']
        if 'roles' in data:
            kwargs['roles'] = data['roles']
        return cls(**kwargs)

