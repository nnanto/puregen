// Code generated by protoc-gen-puregen. DO NOT EDIT.

package com.demo.enums;

import java.util.*;
import java.io.*;
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.*;

    // Type enum nested in message should also be integers
public class Task {
    @JsonProperty("id")
    private String id;

    @JsonProperty("title")
    private String title;

    @JsonProperty("status")
    private Status status;

    @JsonProperty("priority")
    private String priority;

    @JsonProperty("type")
    private Task_Type type;

    public Task() {
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Status getStatus() {
        return status;
    }

    public void setStatus(Status status) {
        this.status = status;
    }

    public String getPriority() {
        return priority;
    }

    public void setPriority(String priority) {
        this.priority = priority;
    }

    public Task_Type getType() {
        return type;
    }

    public void setType(Task_Type type) {
        this.type = type;
    }

    public static class Builder {
        private Task instance = new Task();

        public Builder setId(String id) {
            instance.setId(id);
            return this;
        }

        public Builder setTitle(String title) {
            instance.setTitle(title);
            return this;
        }

        public Builder setStatus(Status status) {
            instance.setStatus(status);
            return this;
        }

        public Builder setPriority(String priority) {
            instance.setPriority(priority);
            return this;
        }

        public Builder setType(Task_Type type) {
            instance.setType(type);
            return this;
        }

        public Task build() {
            return instance;
        }
    }

    public boolean validate() {
        // Add custom validation logic here
        return true;
    }

    public String toJson() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        return mapper.writeValueAsString(this);
    }

    public static Task fromJson(String json) throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        return mapper.readValue(json, Task.class);
    }

}
