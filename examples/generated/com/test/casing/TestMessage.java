// Code generated by protoc-gen-puregen. DO NOT EDIT.

package com.test.casing;

import java.util.*;
import java.io.*;
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.*;

public class TestMessage {
    // puregen:metadata: {"urls": "http://example.com/api/test"}
    @JsonProperty("APIHost")
    private String apiHost;

    @JsonProperty("TPMData")
    private String tpmData;

    @JsonProperty("XMLContent")
    private String xmlContent;

    @JsonProperty("URLPath")
    private String urlPath;

    @JsonProperty("HTTPSEnabled")
    private String httpsEnabled;

    @JsonProperty("UUIDValue")
    private String uuidValue;

    @JsonProperty("JSONData")
    private String jsonData;

    @JsonProperty("APIKey")
    private String apiKey;

    @JsonProperty("SQLQuery")
    private String sqlQuery;

    @JsonProperty("HTMLContent")
    private String htmlContent;

    public TestMessage() {}

    public String getApiHost() {
        return apiHost;
    }

    public void setApiHost(String apiHost) {
        this.apiHost = apiHost;
    }

    public String getTpmData() {
        return tpmData;
    }

    public void setTpmData(String tpmData) {
        this.tpmData = tpmData;
    }

    public String getXmlContent() {
        return xmlContent;
    }

    public void setXmlContent(String xmlContent) {
        this.xmlContent = xmlContent;
    }

    public String getUrlPath() {
        return urlPath;
    }

    public void setUrlPath(String urlPath) {
        this.urlPath = urlPath;
    }

    public String getHttpsEnabled() {
        return httpsEnabled;
    }

    public void setHttpsEnabled(String httpsEnabled) {
        this.httpsEnabled = httpsEnabled;
    }

    public String getUuidValue() {
        return uuidValue;
    }

    public void setUuidValue(String uuidValue) {
        this.uuidValue = uuidValue;
    }

    public String getJsonData() {
        return jsonData;
    }

    public void setJsonData(String jsonData) {
        this.jsonData = jsonData;
    }

    public String getApiKey() {
        return apiKey;
    }

    public void setApiKey(String apiKey) {
        this.apiKey = apiKey;
    }

    public String getSqlQuery() {
        return sqlQuery;
    }

    public void setSqlQuery(String sqlQuery) {
        this.sqlQuery = sqlQuery;
    }

    public String getHtmlContent() {
        return htmlContent;
    }

    public void setHtmlContent(String htmlContent) {
        this.htmlContent = htmlContent;
    }

    public static class Builder {
        private TestMessage instance = new TestMessage();

        public Builder setApiHost(String apiHost) {
            instance.setApiHost(apiHost);
            return this;
        }

        public Builder setTpmData(String tpmData) {
            instance.setTpmData(tpmData);
            return this;
        }

        public Builder setXmlContent(String xmlContent) {
            instance.setXmlContent(xmlContent);
            return this;
        }

        public Builder setUrlPath(String urlPath) {
            instance.setUrlPath(urlPath);
            return this;
        }

        public Builder setHttpsEnabled(String httpsEnabled) {
            instance.setHttpsEnabled(httpsEnabled);
            return this;
        }

        public Builder setUuidValue(String uuidValue) {
            instance.setUuidValue(uuidValue);
            return this;
        }

        public Builder setJsonData(String jsonData) {
            instance.setJsonData(jsonData);
            return this;
        }

        public Builder setApiKey(String apiKey) {
            instance.setApiKey(apiKey);
            return this;
        }

        public Builder setSqlQuery(String sqlQuery) {
            instance.setSqlQuery(sqlQuery);
            return this;
        }

        public Builder setHtmlContent(String htmlContent) {
            instance.setHtmlContent(htmlContent);
            return this;
        }

        public TestMessage build() {
            return instance;
        }
    }

    public boolean validate() {
        // Add custom validation logic here
        return true;
    }

    public String toJson() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        return mapper.writeValueAsString(this);
    }

    public static TestMessage fromJson(String json) throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        return mapper.readValue(json, TestMessage.class);
    }

}
