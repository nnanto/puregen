# Code generated by protoc-gen-puregen. DO NOT EDIT.

from dataclasses import dataclass, field
from typing import Optional, List, Dict, Any
from abc import ABC, abstractmethod
import json

# Messages

# 
@dataclass
class TestDefaults:
    """Generated message class for TestDefaults"""
    # String field with default value
    message: str = "hello world"
    # Integer field with default value
    count: int = 42
    # Boolean field with default value
    enabled: bool = True
    # Float field with default value
    ratio: float = 3.14
    # Field without default value (should use language defaults)
    description: str = ""
    # Field without default value
    age: int = 0

    def validate(self) -> bool:
        """Validate the message fields"""
        # Add custom validation logic here
        return True

    def to_json(self) -> str:
        """Convert message to JSON string"""
        return json.dumps(self.to_dict())

    def to_dict(self) -> Dict[str, Any]:
        """Convert message to dictionary"""
        result = {}
        if self.message is not None:
            result['message'] = self.message
        if self.count is not None:
            result['count'] = self.count
        if self.enabled is not None:
            result['enabled'] = self.enabled
        if self.ratio is not None:
            result['ratio'] = self.ratio
        if self.description is not None:
            result['description'] = self.description
        if self.age is not None:
            result['age'] = self.age
        return result

    @classmethod
    def from_json(cls, json_str: str) -> 'TestDefaults':
        """Create message from JSON string"""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'TestDefaults':
        """Create message from dictionary"""
        kwargs = {}
        if 'message' in data:
            kwargs['message'] = data['message']
        if 'count' in data:
            kwargs['count'] = data['count']
        if 'enabled' in data:
            kwargs['enabled'] = data['enabled']
        if 'ratio' in data:
            kwargs['ratio'] = data['ratio']
        if 'description' in data:
            kwargs['description'] = data['description']
        if 'age' in data:
            kwargs['age'] = data['age']
        return cls(**kwargs)

# Test message without any default values
@dataclass
class NoDefaults:
    """Generated message class for NoDefaults"""
    name: str = ""
    value: int = 0
    flag: bool = False

    def validate(self) -> bool:
        """Validate the message fields"""
        # Add custom validation logic here
        return True

    def to_json(self) -> str:
        """Convert message to JSON string"""
        return json.dumps(self.to_dict())

    def to_dict(self) -> Dict[str, Any]:
        """Convert message to dictionary"""
        result = {}
        if self.name is not None:
            result['name'] = self.name
        if self.value is not None:
            result['value'] = self.value
        if self.flag is not None:
            result['flag'] = self.flag
        return result

    @classmethod
    def from_json(cls, json_str: str) -> 'NoDefaults':
        """Create message from JSON string"""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'NoDefaults':
        """Create message from dictionary"""
        kwargs = {}
        if 'name' in data:
            kwargs['name'] = data['name']
        if 'value' in data:
            kwargs['value'] = data['value']
        if 'flag' in data:
            kwargs['flag'] = data['flag']
        return cls(**kwargs)

# Test message with various edge cases for default values
@dataclass
class EdgeCases:
    """Generated message class for EdgeCases"""
    # String with simple text
    simple_string: str = "Hello World"
    # Empty string default
    empty_string: str = ""
    # Zero values
    zero_int: int = 0
    # 
    zero_float: float = 0.0
    # 
    false_bool: bool = False
    # Large numbers
    large_int: int = 9223372036854775807
    # Negative numbers
    negative_int: int = -42
    # Scientific notation
    scientific: float = 1.23e-4
    # Field without directive (should use language defaults)
    no_directive: str = ""
    # Different numeric types
    unsigned_value: int = 255
    # 
    signed_value: int = 2147483647

    def validate(self) -> bool:
        """Validate the message fields"""
        # Add custom validation logic here
        return True

    def to_json(self) -> str:
        """Convert message to JSON string"""
        return json.dumps(self.to_dict())

    def to_dict(self) -> Dict[str, Any]:
        """Convert message to dictionary"""
        result = {}
        if self.simple_string is not None:
            result['simpleString'] = self.simple_string
        if self.empty_string is not None:
            result['emptyString'] = self.empty_string
        if self.zero_int is not None:
            result['zeroInt'] = self.zero_int
        if self.zero_float is not None:
            result['zeroFloat'] = self.zero_float
        if self.false_bool is not None:
            result['falseBool'] = self.false_bool
        if self.large_int is not None:
            result['largeInt'] = self.large_int
        if self.negative_int is not None:
            result['negativeInt'] = self.negative_int
        if self.scientific is not None:
            result['scientific'] = self.scientific
        if self.no_directive is not None:
            result['noDirective'] = self.no_directive
        if self.unsigned_value is not None:
            result['unsignedValue'] = self.unsigned_value
        if self.signed_value is not None:
            result['signedValue'] = self.signed_value
        return result

    @classmethod
    def from_json(cls, json_str: str) -> 'EdgeCases':
        """Create message from JSON string"""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'EdgeCases':
        """Create message from dictionary"""
        kwargs = {}
        if 'simpleString' in data:
            kwargs['simple_string'] = data['simpleString']
        if 'emptyString' in data:
            kwargs['empty_string'] = data['emptyString']
        if 'zeroInt' in data:
            kwargs['zero_int'] = data['zeroInt']
        if 'zeroFloat' in data:
            kwargs['zero_float'] = data['zeroFloat']
        if 'falseBool' in data:
            kwargs['false_bool'] = data['falseBool']
        if 'largeInt' in data:
            kwargs['large_int'] = data['largeInt']
        if 'negativeInt' in data:
            kwargs['negative_int'] = data['negativeInt']
        if 'scientific' in data:
            kwargs['scientific'] = data['scientific']
        if 'noDirective' in data:
            kwargs['no_directive'] = data['noDirective']
        if 'unsignedValue' in data:
            kwargs['unsigned_value'] = data['unsignedValue']
        if 'signedValue' in data:
            kwargs['signed_value'] = data['signedValue']
        return cls(**kwargs)

