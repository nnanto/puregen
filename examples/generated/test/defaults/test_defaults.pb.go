// Code generated by protoc-gen-puregen. DO NOT EDIT.

package defaults

import (
	"encoding/json"
)

// Messages

type TestDefaults struct {
	// String field with default value
	Message string `json:"message"`
	// Integer field with default value
	Count int32 `json:"count"`
	// Boolean field with default value
	Enabled bool `json:"enabled"`
	// Float field with default value
	Ratio float32 `json:"ratio"`
	// Field without default value (should use language defaults)
	Description string `json:"description"`
	// Field without default value
	Age int32 `json:"age"`
}

func NewTestDefaults() *TestDefaults {
	return &TestDefaults{
		Message: "hello world",
		Count:   42,
		Enabled: true,
		Ratio:   3.14,
	}
}

func (m *TestDefaults) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *TestDefaults) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *TestDefaults) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// Test message without any default values
type NoDefaults struct {
	Name  string `json:"name"`
	Value int32  `json:"value"`
	Flag  bool   `json:"flag"`
}

func NewNoDefaults() *NoDefaults {
	return &NoDefaults{}
}

func (m *NoDefaults) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *NoDefaults) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *NoDefaults) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// Test message with various edge cases for default values
type EdgeCases struct {
	// String with simple text
	SimpleString string `json:"simpleString"`
	// Empty string default
	EmptyString string `json:"emptyString"`
	// Zero values
	ZeroInt int32 `json:"zeroInt"`
	//
	ZeroFloat float32 `json:"zeroFloat"`
	//
	FalseBool bool `json:"falseBool"`
	// Large numbers
	LargeInt int64 `json:"largeInt"`
	// Negative numbers
	NegativeInt int32 `json:"negativeInt"`
	// Scientific notation
	Scientific float64 `json:"scientific"`
	// Field without directive (should use language defaults)
	NoDirective string `json:"noDirective"`
	// Different numeric types
	UnsignedValue uint32 `json:"unsignedValue"`
	//
	SignedValue int32 `json:"signedValue"`
}

func NewEdgeCases() *EdgeCases {
	return &EdgeCases{
		SimpleString:  "Hello World",
		EmptyString:   "",
		ZeroInt:       0,
		ZeroFloat:     0.0,
		FalseBool:     false,
		LargeInt:      9223372036854775807,
		NegativeInt:   -42,
		Scientific:    1.23e-4,
		UnsignedValue: 255,
		SignedValue:   2147483647,
	}
}

func (m *EdgeCases) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *EdgeCases) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *EdgeCases) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}
