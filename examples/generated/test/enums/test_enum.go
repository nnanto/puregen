// Code generated by protoc-gen-puregen. DO NOT EDIT.

package enums

import (
	"encoding/json"
	"fmt"
)

// Enums

type Status int32

const (
	Status_STATUS_UNKNOWN  Status = 0
	Status_STATUS_ACTIVE          = 1
	Status_STATUS_INACTIVE        = 2
)

var Status_name = map[int32]string{
	0: "STATUS_UNKNOWN",
	1: "STATUS_ACTIVE",
	2: "STATUS_INACTIVE",
}

var Status_value = map[string]int32{
	"STATUS_UNKNOWN":  0,
	"STATUS_ACTIVE":   1,
	"STATUS_INACTIVE": 2,
}

func (x Status) String() string {
	if name, ok := Status_name[int32(x)]; ok {
		return name
	}
	return fmt.Sprintf("Status(%d)", x)
}

func ParseStatus(s string) (Status, error) {
	if value, ok := Status_value[s]; ok {
		return Status(value), nil
	}
	return 0, fmt.Errorf("invalid Status value: %s", s)
}

func (x Status) IsValid() bool {
	_, ok := Status_name[int32(x)]
	return ok
}

// Priority enum values as string constants
const (
	Priority_PRIORITY_LOW    = "PRIORITY_LOW"
	Priority_PRIORITY_MEDIUM = "PRIORITY_MEDIUM"
	Priority_PRIORITY_HIGH   = "PRIORITY_HIGH"
)

var PriorityValues = []string{
	Priority_PRIORITY_LOW,
	Priority_PRIORITY_MEDIUM,
	Priority_PRIORITY_HIGH,
}

func IsValidPriority(value string) bool {
	for _, v := range PriorityValues {
		if v == value {
			return true
		}
	}
	return false
}

// Messages

type TestMessage struct {
	Status   Status `json:"status"`
	Priority string `json:"priority"`
}

func NewTestMessage() *TestMessage {
	return &TestMessage{}
}

func (m *TestMessage) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *TestMessage) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *TestMessage) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}
