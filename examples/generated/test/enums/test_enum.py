# Code generated by protoc-gen-puregen. DO NOT EDIT.

from dataclasses import dataclass, field
from typing import Optional, List, Dict, Any
from abc import ABC, abstractmethod
import json
from enum import IntEnum

# Enums

"""
puregen:generate:{"enumType": "int"}
Test enum that should be generated as integers
"""
class Status(IntEnum):
    """Status enum values as integers"""
    STATUS_UNKNOWN = 0
    STATUS_ACTIVE = 1
    STATUS_INACTIVE = 2

    @classmethod
    def is_valid(cls, value: int) -> bool:
        """Check if value is a valid Status"""
        return value in [item.value for item in cls]

# Default enum that should be generated as string constants
class Priority:
    """Priority enum values as string constants"""
    PRIORITY_LOW = "PRIORITY_LOW"
    PRIORITY_MEDIUM = "PRIORITY_MEDIUM"
    PRIORITY_HIGH = "PRIORITY_HIGH"

    VALUES = [
        PRIORITY_LOW,
        PRIORITY_MEDIUM,
        PRIORITY_HIGH,
    ]

    @classmethod
    def is_valid(cls, value: str) -> bool:
        """Check if value is a valid Priority"""
        return value in cls.VALUES

# Messages

@dataclass
class TestMessage:
    """Generated message class for TestMessage"""
    status: int = 0
    priority: str = 0

    def validate(self) -> bool:
        """Validate the message fields"""
        # Add custom validation logic here
        return True

    def to_json(self) -> str:
        """Convert message to JSON string"""
        return json.dumps(self.to_dict())

    def to_dict(self) -> Dict[str, Any]:
        """Convert message to dictionary"""
        result = {}
        if self.status is not None:
            result['status'] = self.status
        if self.priority is not None:
            result['priority'] = self.priority
        return result

    @classmethod
    def from_json(cls, json_str: str) -> 'TestMessage':
        """Create message from JSON string"""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'TestMessage':
        """Create message from dictionary"""
        kwargs = {}
        if 'status' in data:
            kwargs['status'] = data['status']
        if 'priority' in data:
            kwargs['priority'] = data['priority']
        return cls(**kwargs)

