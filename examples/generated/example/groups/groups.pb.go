// Code generated by protoc-gen-puregen. DO NOT EDIT.

package groups

import (
	"context"
	"encoding/json"
	"fmt"
)

// Imported Messages (redefined locally)

type Error struct {
	// Error code
	Code int32 `json:"code"`
	// Human-readable error message
	Message string `json:"message"`
	// Additional details about the error
	Details string `json:"details"`
}

func NewError() *Error {
	return &Error{}
}

func (m *Error) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *Error) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *Error) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// Messages

// Group represents a group entity
type Group struct {
	Id          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	CreatedAt   int64  `json:"createdAt"`
}

func NewGroup() *Group {
	return &Group{}
}

func (m *Group) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *Group) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *Group) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// CreateGroupRequest is the request for creating a group
type CreateGroupRequest struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	// Principal who owns the group
	Owner *Principal `json:"owner"`
}

func NewCreateGroupRequest() *CreateGroupRequest {
	return &CreateGroupRequest{}
}

func (m *CreateGroupRequest) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *CreateGroupRequest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *CreateGroupRequest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// CreateGroupResponse is the response for creating a group
type CreateGroupResponse struct {
	Group *Group `json:"group"`
	// Error details if creation fails
	Error *Error `json:"error"`
}

func NewCreateGroupResponse() *CreateGroupResponse {
	return &CreateGroupResponse{}
}

func (m *CreateGroupResponse) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *CreateGroupResponse) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *CreateGroupResponse) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ListGroupsRequest is the request for listing groups
type ListGroupsRequest struct {
	PageSize  int32  `json:"pageSize"`
	PageToken string `json:"pageToken"`
}

func NewListGroupsRequest() *ListGroupsRequest {
	return &ListGroupsRequest{}
}

func (m *ListGroupsRequest) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *ListGroupsRequest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *ListGroupsRequest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ListGroupsResponse is the response for listing groups
type ListGroupsResponse struct {
	Groups        []*Group `json:"groups"`
	NextPageToken string   `json:"nextPageToken"`
}

func NewListGroupsResponse() *ListGroupsResponse {
	return &ListGroupsResponse{}
}

func (m *ListGroupsResponse) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *ListGroupsResponse) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *ListGroupsResponse) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// Services

// GroupService provides operations on groups
type GroupServiceService interface {
	// CreateGroup creates a new group
	CreateGroup(ctx context.Context, req *CreateGroupRequest) (*CreateGroupResponse, error)
	// ListGroups lists all groups with pagination
	ListGroups(ctx context.Context, req *ListGroupsRequest) (*ListGroupsResponse, error)
}

type DefaultGroupServiceService struct{}

// CreateGroup creates a new group
func (s *DefaultGroupServiceService) CreateGroup(ctx context.Context, req *CreateGroupRequest) (*CreateGroupResponse, error) {
	// TODO: Implement CreateGroup
	return &CreateGroupResponse{}, fmt.Errorf("method CreateGroup not implemented")
}

// ListGroups lists all groups with pagination
func (s *DefaultGroupServiceService) ListGroups(ctx context.Context, req *ListGroupsRequest) (*ListGroupsResponse, error) {
	// TODO: Implement ListGroups
	return &ListGroupsResponse{}, fmt.Errorf("method ListGroups not implemented")
}

// Method name constants

const (
	GroupService_CreateGroup = "GroupService_CreateGroup"
	GroupService_ListGroups  = "GroupService_ListGroups"
)

var MethodMetadata = map[string]map[string]string{}

// Client

type Transport interface {
	Send(ctx context.Context, methodName string, inputData interface{}, outputType interface{}) (interface{}, error)
}

type GroupServiceClient struct {
	transport Transport
}

func NewGroupServiceClient(transport Transport) *GroupServiceClient {
	return &GroupServiceClient{transport: transport}
}

// CreateGroup creates a new group
func (c *GroupServiceClient) CreateGroup(ctx context.Context, req *CreateGroupRequest) (*CreateGroupResponse, error) {
	result, err := c.transport.Send(ctx, GroupService_CreateGroup, req, (*CreateGroupResponse)(nil))
	if err != nil {
		return nil, err
	}
	if response, ok := result.(*CreateGroupResponse); ok {
		return response, nil
	}
	return nil, fmt.Errorf("invalid response type for CreateGroup")
}

// ListGroups lists all groups with pagination
func (c *GroupServiceClient) ListGroups(ctx context.Context, req *ListGroupsRequest) (*ListGroupsResponse, error) {
	result, err := c.transport.Send(ctx, GroupService_ListGroups, req, (*ListGroupsResponse)(nil))
	if err != nil {
		return nil, err
	}
	if response, ok := result.(*ListGroupsResponse); ok {
		return response, nil
	}
	return nil, fmt.Errorf("invalid response type for ListGroups")
}
