// Code generated by protoc-gen-puregen. DO NOT EDIT.

package metadata

import (
	"context"
	"encoding/json"
	"fmt"
)

// Enums

// TaskStatus enum values as string constants
const (
	TaskStatus_UNKNOWN     = "UNKNOWN"
	TaskStatus_PENDING     = "PENDING"
	TaskStatus_IN_PROGRESS = "IN_PROGRESS"
	TaskStatus_COMPLETED   = "COMPLETED"
	TaskStatus_CANCELLED   = "CANCELLED"
)

var TaskStatusValues = []string{
	TaskStatus_UNKNOWN,
	TaskStatus_PENDING,
	TaskStatus_IN_PROGRESS,
	TaskStatus_COMPLETED,
	TaskStatus_CANCELLED,
}

func IsValidTaskStatus(value string) bool {
	for _, v := range TaskStatusValues {
		if v == value {
			return true
		}
	}
	return false
}

// TaskStatusMetadata contains metadata for TaskStatus
var TaskStatusMetadata = map[string]string{
	"category":   "status",
	"ui_type":    "dropdown",
	"validation": "required",
}

// Messages

// Example message with metadata for database mapping
// puregen:metadata: {"table": "tasks", "cache": "true", "partition_key": "user_id"}
type Task struct {
	// Primary key field with validation metadata
	// puregen:metadata: {"index": "primary", "validation": "uuid", "db_column": "task_id"}
	Id string `json:"id"`
	// Required field with length constraints
	// puregen:metadata: {"validation": "required", "min_length": "1", "max_length": "200"}
	Title string `json:"title"`
	// Optional field with UI metadata
	// puregen:metadata: {"ui_widget": "textarea", "placeholder": "Enter task description..."}
	Description string `json:"description"`
	// Status field with validation and default value
	// puregen:metadata: {"validation": "enum", "default": "PENDING", "required": "true"}
	Status string `json:"status"`
	// Timestamp field with format metadata
	// puregen:metadata: {"format": "unix_timestamp", "index": "secondary"}
	CreatedAt int64 `json:"createdAt"`
}

func NewTask() *Task {
	return &Task{}
}

func (m *Task) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *Task) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *Task) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// TaskMetadata contains metadata for Task
var TaskMetadata = map[string]string{
	"cache":         "true",
	"partition_key": "user_id",
	"table":         "tasks",
}

// Field name constants for Task
const (
	Task_Id_FIELD          = "Task_Id"
	Task_Title_FIELD       = "Task_Title"
	Task_Description_FIELD = "Task_Description"
	Task_Status_FIELD      = "Task_Status"
	Task_CreatedAt_FIELD   = "Task_CreatedAt"
)

// MessageField metadata for Task
var TaskFieldMetadata = map[string]map[string]string{
	Task_Id_FIELD: {
		"db_column":  "task_id",
		"index":      "primary",
		"validation": "uuid",
	},
	Task_Title_FIELD: {
		"max_length": "200",
		"min_length": "1",
		"validation": "required",
	},
	Task_Description_FIELD: {
		"placeholder": "Enter task description...",
		"ui_widget":   "textarea",
	},
	Task_Status_FIELD: {
		"default":    "PENDING",
		"required":   "true",
		"validation": "enum",
	},
	Task_CreatedAt_FIELD: {
		"format": "unix_timestamp",
		"index":  "secondary",
	},
}

type CreateTaskRequest struct {
	// Required fields for task creation
	// puregen:metadata: {"validation": "required", "trim_whitespace": "true"}
	Title       string `json:"title"`
	Description string `json:"description"`
}

func NewCreateTaskRequest() *CreateTaskRequest {
	return &CreateTaskRequest{}
}

func (m *CreateTaskRequest) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *CreateTaskRequest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *CreateTaskRequest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// Field name constants for CreateTaskRequest
const (
	CreateTaskRequest_Title_FIELD = "CreateTaskRequest_Title"
)

// MessageField metadata for CreateTaskRequest
var CreateTaskRequestFieldMetadata = map[string]map[string]string{
	CreateTaskRequest_Title_FIELD: {
		"trim_whitespace": "true",
		"validation":      "required",
	},
}

type CreateTaskResponse struct {
	Task *Task `json:"task"`
}

func NewCreateTaskResponse() *CreateTaskResponse {
	return &CreateTaskResponse{}
}

func (m *CreateTaskResponse) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *CreateTaskResponse) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *CreateTaskResponse) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

type GetTaskRequest struct {
	// puregen:metadata: {"validation": "uuid"}
	Id string `json:"id"`
}

func NewGetTaskRequest() *GetTaskRequest {
	return &GetTaskRequest{}
}

func (m *GetTaskRequest) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *GetTaskRequest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *GetTaskRequest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// Field name constants for GetTaskRequest
const (
	GetTaskRequest_Id_FIELD = "GetTaskRequest_Id"
)

// MessageField metadata for GetTaskRequest
var GetTaskRequestFieldMetadata = map[string]map[string]string{
	GetTaskRequest_Id_FIELD: {
		"validation": "uuid",
	},
}

type GetTaskResponse struct {
	Task *Task `json:"task"`
}

func NewGetTaskResponse() *GetTaskResponse {
	return &GetTaskResponse{}
}

func (m *GetTaskResponse) Validate() error {
	// Add custom validation logic here
	return nil
}

func (m *GetTaskResponse) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

func (m *GetTaskResponse) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// Services

// Example service with method metadata
type TaskServiceService interface {
	// Create task endpoint with HTTP mapping
	// puregen:metadata: {"method": "POST", "path": "/api/v1/tasks", "auth": "required"}
	CreateTask(ctx context.Context, req *CreateTaskRequest) (*CreateTaskResponse, error)
	// Get task endpoint with caching
	// puregen:metadata: {"method": "GET", "path": "/api/v1/tasks/{id}", "cache": "true", "cache_ttl": "300"}
	GetTask(ctx context.Context, req *GetTaskRequest) (*GetTaskResponse, error)
}

type DefaultTaskServiceService struct{}

// Create task endpoint with HTTP mapping
// puregen:metadata: {"method": "POST", "path": "/api/v1/tasks", "auth": "required"}
func (s *DefaultTaskServiceService) CreateTask(ctx context.Context, req *CreateTaskRequest) (*CreateTaskResponse, error) {
	// TODO: Implement CreateTask
	return &CreateTaskResponse{}, fmt.Errorf("method CreateTask not implemented")
}

// Get task endpoint with caching
// puregen:metadata: {"method": "GET", "path": "/api/v1/tasks/{id}", "cache": "true", "cache_ttl": "300"}
func (s *DefaultTaskServiceService) GetTask(ctx context.Context, req *GetTaskRequest) (*GetTaskResponse, error) {
	// TODO: Implement GetTask
	return &GetTaskResponse{}, fmt.Errorf("method GetTask not implemented")
}

// Method name constants

const (
	TaskService_CreateTask = "TaskService_CreateTask"
	TaskService_GetTask    = "TaskService_GetTask"
)

var MethodMetadata = map[string]map[string]string{
	TaskService_CreateTask: {
		"auth":   "required",
		"method": "POST",
		"path":   "/api/v1/tasks",
	},
	TaskService_GetTask: {
		"cache":     "true",
		"cache_ttl": "300",
		"method":    "GET",
		"path":      "/api/v1/tasks/{id}",
	},
}

// Client

type Transport interface {
	Send(ctx context.Context, methodName string, inputData interface{}, outputType interface{}) (interface{}, error)
}

type TaskServiceClient struct {
	transport Transport
}

func NewTaskServiceClient(transport Transport) *TaskServiceClient {
	return &TaskServiceClient{transport: transport}
}

// Create task endpoint with HTTP mapping
// puregen:metadata: {"method": "POST", "path": "/api/v1/tasks", "auth": "required"}
func (c *TaskServiceClient) CreateTask(ctx context.Context, req *CreateTaskRequest) (*CreateTaskResponse, error) {
	if metadata, exists := MethodMetadata[TaskService_CreateTask]; exists {
		ctx = context.WithValue(ctx, "method_metadata", metadata)
	}
	result, err := c.transport.Send(ctx, TaskService_CreateTask, req, (*CreateTaskResponse)(nil))
	if err != nil {
		return nil, err
	}
	if response, ok := result.(*CreateTaskResponse); ok {
		return response, nil
	}
	return nil, fmt.Errorf("invalid response type for CreateTask")
}

// Get task endpoint with caching
// puregen:metadata: {"method": "GET", "path": "/api/v1/tasks/{id}", "cache": "true", "cache_ttl": "300"}
func (c *TaskServiceClient) GetTask(ctx context.Context, req *GetTaskRequest) (*GetTaskResponse, error) {
	if metadata, exists := MethodMetadata[TaskService_GetTask]; exists {
		ctx = context.WithValue(ctx, "method_metadata", metadata)
	}
	result, err := c.transport.Send(ctx, TaskService_GetTask, req, (*GetTaskResponse)(nil))
	if err != nil {
		return nil, err
	}
	if response, ok := result.(*GetTaskResponse); ok {
		return response, nil
	}
	return nil, fmt.Errorf("invalid response type for GetTask")
}
