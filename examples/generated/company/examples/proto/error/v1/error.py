# Code generated by protoc-gen-puregen. DO NOT EDIT.

from dataclasses import dataclass, field
from typing import Optional, List, Dict, Any
from abc import ABC, abstractmethod
import json

# Messages

@dataclass
class Error:
    """Generated message class for Error"""
    # Error code
    code: int = 0
    # Human-readable error message
    message: str = ""
    # Additional details about the error
    details: str = ""

    def validate(self) -> bool:
        """Validate the message fields"""
        # Add custom validation logic here
        return True

    def to_json(self) -> str:
        """Convert message to JSON string"""
        return json.dumps(self.to_dict())

    def to_dict(self) -> Dict[str, Any]:
        """Convert message to dictionary"""
        result = {}
        if self.code is not None:
            result['code'] = self.code
        if self.message is not None:
            result['message'] = self.message
        if self.details is not None:
            result['details'] = self.details
        return result

    @classmethod
    def from_json(cls, json_str: str) -> 'Error':
        """Create message from JSON string"""
        data = json.loads(json_str)
        return cls.from_dict(data)

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Error':
        """Create message from dictionary"""
        kwargs = {}
        if 'code' in data:
            kwargs['code'] = data['code']
        if 'message' in data:
            kwargs['message'] = data['message']
        if 'details' in data:
            kwargs['details'] = data['details']
        return cls(**kwargs)

