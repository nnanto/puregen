{{ define "metadata" -}}
{
  "extension": "py",
  "typeMapping": {
    "int32": "int",
    "int64": "int",
    "string": "str",
    "map[string]string": "Dict[str, str]"
  }
}
{{- end }}
"""
Auto-generated Python code from IDL schema using dataclasses
"""

from dataclasses import dataclass, asdict
from typing import Dict, Any, Optional
import json

{{range .Messages}}
@dataclass
class {{.Name}}:
    """
    {{.Description}}
    """
{{range $fieldName, $field := .Fields}}    {{$fieldName}}: {{$field.Type}} = None  # {{$field.Description}}
{{end}}
    
    def to_dict(self) -> Dict[str, Any]:
        return asdict(self)
    
    def to_json(self) -> str:
        return json.dumps(self.to_dict())
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "{{.Name}}":
        return cls(**{k: v for k, v in data.items() if k in cls.__dataclass_fields__})
    
    @classmethod
    def from_json(cls, json_str: str) -> "{{.Name}}":
        data = json.loads(json_str)
        return cls.from_dict(data)

{{end}}

{{range .Services}}
class {{.Name}}:
    """
    {{.Name}} service interface
    """
    
{{range .Methods}}    async def {{.Name}}(self, input_data: {{.Input}}) -> {{.Output}}:
        """
        {{.Description}}
        """
        # TODO: Implement {{.Name}}
        print(f"Called {{.Name}} with input: {input_data}")
        return None
    
{{end}}
{{end}}
